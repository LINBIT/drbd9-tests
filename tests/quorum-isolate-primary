#! /usr/bin/env python3
#
# test_write_between_disconnects():
# Block network to one secondary. Wait until the primary notices that.
# Block network to the the other secondary. Issue a write. Expect IO error.
# Demote primary. Write on on of the former secondaries. Reconnect isolated
# node, expect resync.
# DRBD before 9.0.20 produced here an UUID, and had a split brain instead of resync.
#

#
# test_quick_promote():
# Starting with 3 nodes, one is primary.
# Isolate primary node. Try to promote one of the remaining
# nodes as quick as possible. The two remaining nodes have
# quorum but need to become D_CONSISTENT for a short time
# span. Then they use the try_become_up_to_date() mechanism
# to become D_UPTODATE again.
#
# Check that the promotion does not fail with strange exit codes.
#
import time
import random
from python import drbdtest
from python.drbdtest import log
from subprocess import CalledProcessError

random.seed()

def test_write_between_disconnects(resource):
    primary_n = random.choice(resource.nodes)
    secondaries_n = drbdtest.Nodes(resource.nodes)
    secondaries_n.remove(primary_n)
    log('* %s is the primary' % primary_n.name)
    primary_n.primary()

    cut1_sec = random.choice(secondaries_n)
    rem_sec = secondaries_n
    rem_sec.remove(cut1_sec)
    cut2_sec = rem_sec[0]

    log('* cutting off first secondary (%s) from primary' % (cut1_sec.name))
    connection_to_cut1 = resource.connections.to_node(primary_n).from_node(cut1_sec)[0]
    connection_witness1 = resource.connections.from_node(primary_n).to_node(cut1_sec)[0]

    connection_to_cut1.block(jump_to="DROP")
    cut2_sec.block_packet_type(drbdtest.P_PING_ACK, from_node=primary_n, volume=0xFFFF)
    # drop the ping_ack from primary to secondary. That is necessary so that
    # the nodes can start the reconciliation resync. We are simulating that the
    # DATA packet leaving the primary reaches cut2 secondary but not cut1
    # secondary. But it would be very strange (and not inteded to test)
    # that the cut2 secondary can still ping the primary when cut1 already
    # wants to reconciliate with cut2.

    dev_name = primary_n.volumes[0].device()
    primary_n.run(["setsid", "bash", "-c", "dd if=/dev/zero of=%s bs=%dk count=1 oflag=direct < /dev/null &> /dev/null &" % (dev_name, 4)])
    connection_witness1.event(r'connection .* connection:NetworkFailure')

    log('* silently cutting off other secondary (%s) from primary' % (cut2_sec.name))

    connection_to_cut2 = resource.connections.to_node(primary_n).from_node(cut2_sec)[0]
    connection_to_cut2.block(jump_to="DROP")

    try:
        primary_n.volumes.write(direct=1)
        raise RuntimeError('Quorum was not lost, although expected!')
    except CalledProcessError:
        pass # Expect the IO error in case quorum was lost

    log('* Checking promote & IO in larger partition')

    connection_to_cut1.event(r'connection .* connection:Unconnected')
    connection_to_cut2.event(r'connection .* connection:Unconnected')
    #tmp_pri = random.choice(secondaries_n)
    tmp_pri = cut1_sec
    tmp_pri.primary(wait=False)

    # Make sure the reconciliation resync happens
    reconciliation_c = resource.connections.from_node(cut1_sec).to_node(cut2_sec)[0]
    reconciliation_pd = drbdtest.PeerDevice(reconciliation_c, resource.volumes[0])
    reconciliation_pd.event(r'peer-device .* replication:SyncTarget')
    reconciliation_pd.event(r'peer-device .* replication:Established')
    tmp_pri.event(r'resource .* role:Primary')
    tmp_pri.run(["dd", "if=/dev/zero", "of=%s" % (dev_name), "bs=%dk" % 4, "count=1",  "oflag=direct"])

    log('* re-integrating')
    tmp_pri.secondary()
    primary_n.secondary()

    cut2_sec.unblock_packet_type(drbdtest.P_PING_ACK, from_node=primary_n, volume=0xFFFF)
    connection_to_cut1.unblock(jump_to="DROP")
    connection_to_cut2.unblock(jump_to="DROP")

    evs = [r'peer-node-id:%d .* connection:Connected' % (n.id) for n in [ cut1_sec, cut2_sec]] + \
          [r'volume:0 .* disk:Inconsistent', r'volume:0 .* disk:UpToDate']
    primary_n.event(*evs)
    connection_to_cut1.event(r'connection .* connection:Connected')
    connection_to_cut2.event(r'connection .* connection:Connected')


def test_quick_promote(resource):
    primary_n = random.choice(resource.nodes)
    secondaries_n = drbdtest.Nodes(resource.nodes)
    secondaries_n.remove(primary_n)
    log('* %s is the primary' % primary_n.name)
    primary_n.primary()
    primary_n.volumes.write(direct=1)

    log('* Isolating the primary, while writing at the same time')
    tmp_pri = random.choice(secondaries_n)
    connections_to_cut = resource.connections.to_node(primary_n)
    connections_witness = resource.connections.from_node(primary_n)

    connections_to_cut.block(jump_to="REJECT")
    connections_to_cut.disconnect(wait = False, force = True)

    tmp_pri.primary()
    tmp_pri.volumes.write(direct=1)

    try:
        primary_n.volumes.write(direct=1)
        raise RuntimeError('Quorum was not lost, although expected!')
    except CalledProcessError:
        pass # Expect the IO error in case quorum was lost

    connections_to_cut.unblock(jump_to="REJECT")

    log('* re-integrating')
    tmp_pri.secondary()
    primary_n.secondary()
    connections_to_cut.connect()
    evs = [r'peer-node-id:%d .* connection:Connected' % (n.id) for n in secondaries_n] + \
          [r'volume:0 .* disk:Inconsistent', r'volume:0 .* disk:UpToDate']
    primary_n.event(*evs)


#main
resource = drbdtest.setup(min_nodes=3, max_nodes=3)
resource.add_disk('10M')
resource.resource_options = 'quorum majority; on-no-quorum io-error; twopc-timeout 100;'
resource.net_options = 'ping-int 2;'

resource.up_wait()

log('* Make up-to-date data available.')
resource.skip_initial_sync()

resource.forbidden_patterns.difference_update([
    r'connection:NetworkFailure',
    r'connection:BrokenPipe',
    r'connection:ProtocolError'
])

test_write_between_disconnects(resource)

for i in range(2):
    test_quick_promote(resource)

resource.down()

try:
    primary_b.run(['udevadm', 'settle', '--timeout=2'])
except:
    pass

resource.rmmod()
