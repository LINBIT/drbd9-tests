#! /bin/bash

test_log() {
    [ -z "$V" ] || echo "$@"
    on "${NODES[@]}" logger "$@"
}

TOP=${0%/*}/..
. $TOP/lib/setup.sh

setup --min-nodes=3 --disk=10M "$@"

first_node=${NODES[0]}
other_nodes=( $(all_nodes_except "$first_node") )

test_log resource up on all nodes
_up
test_log waiting for connections to establish
_wait_connected
_force_primary
test_log waiting for initial resync
_initial_resync

on "$first_node" drbdadm secondary $RESOURCE
event "$first_node" -y 'resource .* role:Secondary'
connection_event $(all_connections_to $first_node) -y 'connection .* role:Secondary'

test_log disconnecting all nodes
_disconnect "${CONNECTIONS[@]}"

# Build a straight line. E.g.: A - B - C - D
line=()
for ((i=0 ; i < ${#NODES[@]}-1 ; i++)); do
    j=$((i+1))
    line[$i]="${NODES[$i]}:${NODES[$j]}"
done
line=( "${line[@]}" $(reverse_connections "${line[@]}") )

test_log Establishing connections: "${line[@]}"
_connect "${line[@]}"
connection_event "${line[@]}" -y 'connection .* connection:Connected'

# Expect all nodes except the primary and it's neighbour to become outdated
weak_nodes=()
for ((i=0 ; i < ${#NODES[@]}-2 ; i++)); do
    j=$((i+2))
    weak_nodes[$i]="${NODES[$j]}"
done
test_log primary $first_node, expeting Outdated on "${weak_nodes[@]}"
on "$first_node" drbdadm primary $RESOURCE
volume_event "${weak_nodes[@]/%/:1}" -y 'device .* disk:Outdated'

# Expect all nodes to become UpToDate again
test_log secondary $first_node, expeting UpToDate on "${weak_nodes[@]}"
on "$first_node" drbdadm secondary $RESOURCE
volume_event "${weak_nodes[@]/%/:1}" -y 'device .* disk:UpToDate'

_down
_rmmod
