#!/usr/bin/python

from __future__ import division, print_function

import sys, os
import ctypes
from ctypes.util import find_library

class IOVec(ctypes.Structure):
    _fields_ = [("iov_base", ctypes.c_void_p),
                ("iov_len", ctypes.c_size_t)]

IOVec4Elem = IOVec * 4

libc = ctypes.CDLL(find_library('c'), use_errno=True)
page_size = libc.getpagesize()
sect_size = 512
current_byte = 0

def memset(address, byte, size):
    libc.memset(ctypes.cast(address, ctypes.c_void_p), byte, size)

def memcmp(a, b, size):
    return libc.memcmp(ctypes.cast(a, ctypes.c_void_p), ctypes.cast(b, ctypes.c_void_p), size)

def write(fd, address, size):
    n = libc.write(fd, ctypes.cast(address, ctypes.c_void_p), size)
    if n == -1:
        errno = ctypes.get_errno()
        raise OSError(errno, "libc.write(%d, 0x%lx, %d): %s" % (
            fd, address, size, os.strerror(errno)))
    if n != size:
        raise OSError("libc.write(%d, 0x%lx, %d) returned %d. Short write?" % (
            fd, address, size, n))
    return n

def read(fd, address, size):
    n = libc.read(fd, ctypes.cast(address, ctypes.c_void_p), size)
    if n == -1:
        errno = ctypes.get_errno()
        raise OSError(errno, "libc.read(%d, 0x%lx, %d): %s" % (
            fd, address, size, os.strerror(errno)))
    if n != size:
        raise OSError("libc.read(%d, 0x%lx, %d) returned %d. Short read?" % (
            fd, address, size, n))
    return n

def prepare_buffer(start, size):
    global current_byte
    for j in range(0, size // sect_size):
        memset(start + j * sect_size, current_byte, sect_size)
        current_byte += 1

def write_pattern(fd, buffer_ptr):
    #test bios with missaligned start, 4k in size
    for i in range(1, page_size // sect_size):
        prepare_buffer(buffer_ptr.value + i * sect_size, page_size)
        write(fd, buffer_ptr.value + i * sect_size, page_size)

    #test missaligned start 6k bio (aligned end)
    prepare_buffer(buffer_ptr.value + page_size // 2, page_size + page_size // 2)
    write(fd, buffer_ptr.value + page_size // 2, page_size + page_size // 2)

    #test missaligned start 9k bio (aligned end)
    prepare_buffer(buffer_ptr.value + sect_size, page_size * 2 + sect_size)
    write(fd, buffer_ptr.value + sect_size, page_size * 2 + sect_size)

    #test 2k bio with 3 holes
    for j in range(0, 4):
        prepare_buffer(buffer_ptr.value + j * page_size, sect_size)
    iovecs = IOVec4Elem((buffer_ptr.value,                 sect_size),
                        (buffer_ptr.value + page_size,     sect_size),
                        (buffer_ptr.value + page_size * 2, sect_size),
                        (buffer_ptr.value + page_size * 3, sect_size))

    n = libc.writev(fd, ctypes.byref(iovecs), 4)
    if n == -1:
        errno = ctypes.get_errno()
        raise OSError(errno, "libc.writev(%d, 0x%lx, %d): %s" % (
            fd, ctypes.byref(iovecs), 4, os.strerror(errno)))
    elif n != 4 * sect_size:
        raise OSError("libc.writev(%d, 0x%lx, %d): incomplete: %d != %d" % (
            fd, ctypes.byref(iovecs), 4, n, 4 * sect_size))

    #mark the end of the test
    memset(buffer_ptr.value, 255, sect_size)
    write(fd, buffer_ptr.value, sect_size)

def verify_pattern(fd, buffer_ptr):
    global current_byte
    # "rewind"
    expected_end_sector = current_byte
    if os.lseek(fd, 0, os.SEEK_SET) != 0:
        raise OSError("os.lseek(fd, 0, SEEK_SET) failed")
    sector = 0
    current_byte = 0
    while True:
        read(fd, buffer_ptr.value, sect_size)
        memset(buffer_ptr.value + page_size, current_byte, sect_size)
        r = memcmp(buffer_ptr.value, buffer_ptr.value + page_size, sect_size)
        if r != 0:
            # okay, maybe end of pattern marker?
            # expected_end_sector == 0: explicit verify run
            # expected_end_sector == sector: implicit verify
            # after write_pattern
            # we usually use this directly on a block device,
            # so checking for "end of file" is not a useful conecpt.
            if expected_end_sector == 0 or sector == expected_end_sector:
                memset(buffer_ptr.value + page_size, 255, sect_size)
                r = memcmp(buffer_ptr.value, buffer_ptr.value + page_size, sect_size)
                if r == 0:
                    break
            print("sector %d: r = %d" % (sector,r))
            raise Exception('Does not verify')

        sector += 1
        current_byte += 1

def main():
    buffer_ptr = ctypes.c_void_p()
    buffer_size = page_size * 8

    if libc.posix_memalign(ctypes.byref(buffer_ptr), page_size, buffer_size) != 0:
        raise Exception('ENOMEM')

    fd = os.open(sys.argv[1], os.O_RDWR | os.O_DIRECT)
    # will raise an exception if open fails

    if len(sys.argv) > 2 and sys.argv[2] == "verify":
        verify_pattern(fd, buffer_ptr)
    else:
        write_pattern(fd, buffer_ptr)
        verify_pattern(fd, buffer_ptr)

    os.close(fd)


if __name__ == "__main__":
    main()
