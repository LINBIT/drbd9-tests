#! /usr/bin/env python3

# Pass this script a list of host names to use as the test nodes.

import random
import time

from python import drbdtest
from python.drbdtest import log
from python.drbdtest import AsPrimary
from subprocess import CalledProcessError

resource = drbdtest.setup(min_nodes=2, max_nodes=2)
resource.add_disk('96M')


### FIXME: max_nodes = 3
### Peer supports protocols 86-101, but multiple connections are only supported in protocol 110 and above


first = resource.nodes[0]
others = resource.nodes.difference([first])
second = others[0]
third = None
if len(others) > 1:
    third = others[1]

for n in [first]:
# for n in resource.nodes: # for 8.4 only tests
    n.run(['rmmod', 'drbd'])
    n.run(['modprobe', 'libcrc32c'])
    n.run(['insmod', '/data/drbd-8.4/drbd/drbd.ko'])

    log("8.4 is node %s" % n)
    log((n.run(
                ['cat', '/proc/drbd'],
                return_stdout=True,
                prepare=True,
                prefix=str(n) + ": ")))

    n.drbd_major_version = 8
    n.config_changed = True
    n.update_config()

    # rmmod caused "drbdsetup events" to quit
    n.listen_to_events()

    # drbdadm-84 doesn't match the FQDN, set "good" value
    n.run(['hostname', n.hostname])
    n.run(['drbdadm', '--', '--force', 'create-md', 'all'])


log("conf is<<<<< \n%s\n>>>>" %  first.config())
resource.nodes.run(['true'], prepare=True)

# we start with 8.4 having valid data.
# in case we run with 3 nodes we have to tell which one we want.
first.up(['--peer', second.hostname])
first.primary(force=True)
first.fio(section="write")
first.secondary()

log(str(second) + " connect, check data.")
second.up()
time.sleep(2)
# TODO second.volumes.event('device .* disk:UpToDate')


# check that the data is correct, even during sync!
with AsPrimary(second):
    second.fio(section="verify")
    # wait for sync to finish, and re-verify
    # this command doesn't work, as the events on 8.4 say "conn-name:peer".
    #   first.peer_devices.event(r'peer-device .* peer-disk:UpToDate')
    second.volumes.event('device .* disk:UpToDate')
    second.fio(section="verify")


# now run 8.4 diskless a bit
first.run(['drbdadm', 'detach', 'all'])
with AsPrimary(first):
    first.fio(section="write")
    first.fio(section="write")
    # time.sleep(10)

first.run(['drbdadm', 'attach', 'all'])
first.volumes.event('device .* disk:UpToDate')


## Now the other host takes over...
with AsPrimary(second):
    second.fio(section="write")
with AsPrimary(first):
    first.fio(section="verify")


# and 8.4 gets to be only one serving for a bit
second.run(['drbdadm', 'detach', 'all'])
with AsPrimary(second):
    second.fio(section="write")
    second.fio(section="write")
    second.fio(section="write")
second.run(['drbdadm', 'attach', 'all'])
second.volumes.event('device .* disk:UpToDate')

with AsPrimary(first):
    first.fio(section="verify")


# 8.4 gets stopped, a third node connected
log(str(first) + " with 8.4 gets stopped")
first.run(['drbdadm', 'down', 'all'])
### FIXME: cannot work, the 8.4 node has space for only 1 bitmap.
### TODO: resize LV?
### if third:
###     log(str(third) + " gets connected")
###     third.up()
###     third.fio(section="verify")
###     third.volumes.event('device .* disk:UpToDate')
###     third.fio(section="verify")


# import sys
# sys.exit(0)


log(str(first) + " gets reinstalled with DRBD 9...")
first.run(['rmmod', 'drbd'])
first.drbd_major_version = 9
first.config_changed = True
first.update_config()
# rmmod caused "drbdsetup events" to quit
first.listen_to_events()


# needed convert v08 to v09
first.run(['drbdadm', '--', '--force', 'create-md', 'all'])

# check for working upgrade path
first.up()
with AsPrimary(first):
    first.fio(section="verify")



log('* Shut down and clean up.')

#resource.down()
#resource.rmmod()
