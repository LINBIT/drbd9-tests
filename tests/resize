#! /usr/bin/env python

# Pass this script a list of host names to use as the test nodes.
# From 3 nodes on, one will only be weakly connected;
# from 4 nodes on, one will be diskless.

from python import drbdtest
from python.drbdtest import verbose
from subprocess import CalledProcessError
import time

# In MB; should be a multiple of the PE size, so that there's _really_ a size change ;)
size = 8
step = 8

# Settle time in seconds (should be 0)
settle_time = 0.5

def verify_size(size_mb = 0):
    common_size = 0
    for n in resource.nodes:
        size_bytes = int(n.run(['blockdev', '--getsize64',
                                '/dev/drbd%d' % (n.disks[0].minor)],
                               return_stdout=True))
        if (size_mb):
            if (size_mb * 2**20 != size_bytes):
                raise RuntimeError("Expected %dM found %dM on %s" %
                                   (size_mb, size_bytes / 2.0**20, n.name))
        if (common_size == 0):
            common_size = size_bytes
        else:
            if (size_bytes != common_size):
                raise RuntimeError("Expected %d found %d on %s" %
                                   (common_size, size_bytes, n.name))


resource = drbdtest.setup(min_nodes=2, max_nodes=5)

# Node sets
client_nodes = []
weak_node = None
nr_nodes = len(resource.nodes)

if nr_nodes > 3:
    diskful_nodes = resource.nodes[0:nr_nodes - 1]
else:
    diskful_nodes = resource.nodes

# don't have the diskless one weakly connected, too!
if len(resource.nodes) > 2:
    weak_node = diskful_nodes[-1]

# take a strong one
first_node = diskful_nodes[0]

# Initialization
resource.add_disk('%dM' % size, diskful_nodes=diskful_nodes)
resource.up_wait()

verbose('* Make up-to-date data available.')
resource.skip_initial_sync();

# make one node "weakly" connected
#if weak_node:
#    for n in resource.nodes:
#        if n != weak_node and n != first_node:
#            weak_node.disconnect(n)

#first_node.fio(section="write")


## TODOs: add some test for --assume-peer-has-space
## test without assume-clean

verbose('* Resize on each diskfull node once. Testing --size and --assume-clean')
for n in diskful_nodes:
    # new values
    size += step
    size_str = "%dM" % size

    verbose('* Node %s wants to use %dMB;' % (n, size - 1))

    # Only if same VG everywhere
    diskful_nodes.volumes.resize(size_str)

    time.sleep(settle_time)

    n.run(['drbdadm', 'resize', '--assume-clean',
                     '--size=%dM' % (size - 1), resource.name])

    time.sleep(settle_time)
    verify_size(size-1)

verbose('* Get rid of the user supplied size')
for n in diskful_nodes:
    time.sleep(settle_time)
    n.run(['drbdadm', 'resize', '--assume-clean', resource.name])
    time.sleep(settle_time)


verbose('* Resize on each diskfull node once. Testing --assume-clean')
for n in diskful_nodes:
    size += step
    size_str = "%dM" % size

    verbose('* Node %s wants to use %dMB;' % (n, size))

    diskful_nodes.volumes.resize(size_str)

    time.sleep(settle_time)

    n.run(['drbdadm', 'resize', '--assume-clean', resource.name])

    time.sleep(settle_time)
    verify_size()


verbose('* Shut down and clean up.')
resource.down()
resource.rmmod()
