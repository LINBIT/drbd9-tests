#! /usr/bin/env python3
### vmshed: { "vms_all": [3], "vms_ci": [3], "drbd_version_min": "9.0" }

# This test is run on a 3-node cluster
#
#     B
#   / |
# A   |
#   \ |
#     C
#
# Phases of this test:
# 1) C is isolated, and B writes a large amount of data (100MiB)
#
# 2) C is reconnected, which should trigger a resync between B and C
#
# 3) While the resync is in progress, A starts generating lots of
#    writes. The catch is that the connection between A and C is
#    slower, so that the SyncSource gets the requests before the
#    SyncTarget. This should (or, ideally, shouldn't) cause the
#    cluster to deadlock.

from python import drbdtest
from python.drbdtest import connections, log, peer_devices
from python import trafficcontrol

def write_on_node(node):
    node.volumes.write(size='100M', offset='10M', end_fsync=1)

resource = drbdtest.setup(nodes=3)
resource.net_options = 'connect-int 1;'

a = resource.nodes[0]
b = resource.nodes[1]
c = resource.nodes[2]

a_c = connections(a, c)
b_c = connections(b, c)
to_c = connections(to_node=c)
c_a = connections(c, a)
c_b = connections(c, b)
from_c = connections(c)

a_tc = trafficcontrol.TrafficControl(a, resource.nodes)
b_tc = trafficcontrol.TrafficControl(b, resource.nodes)

resource.add_disk('128M')
resource.up_wait()

log('* Make up-to-date data available.')
resource.skip_initial_sync()

b_c.disconnect()
c_b.event(r'connection .* connection:TearDown')
c_b.event(r'connection .* connection:Connecting')
b.primary()

write_on_node(b)

a_tc.slow_down(c, delay='50ms')
b_tc.slow_down(c, speed='100mbit')
b_c.connect()
b_c.event(r'connection .* connection:Connected')
c_b.event(r'connection .* connection:Connected')

b.secondary()
a.primary()
write_on_node(a)

c.event(r'response helper .* helper:after-resync-target')

log('* Shut down and clean up.')

resource.down()
a_tc.reset()
b_tc.reset()
resource.teardown()
