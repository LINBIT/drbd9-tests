#! /usr/bin/env python
#
# This test configures a 3 node system, isolates one node (A), writes something
# on the remaining partition (B & C). Let the isolated node resync with one of
# the nodes having the new data (B). Then, make it primary while it is sync
# target. Wait until resync finishes, connect it to the other node (C)
# from the "new data partition".

import random
from python import drbdtest
from python.drbdtest import verbose

random.seed()
resource = drbdtest.setup(min_nodes=3, max_nodes=3)
resource.disk_options = 'c-max-rate 5M;'
resource.add_disk('10M')
resource.up_wait()

verbose('* Make up-to-date data available.')
resource.skip_initial_sync()

[node_a, node_b, node_c] = random.sample(resource.nodes, 3)

verbose('* Isolating %s' % (node_a.name))
resource.connections.from_node(node_a).disconnect()

verbose('* New data on %s %s' % (node_b.name, node_c.name))
node_b.run(['dd', 'if=/dev/urandom', 'of=%s' % (node_b.volumes[0].device()) , 'bs=1M', 'count=9'])

verbose('* Resync from %s to %s' % (node_b.name, node_a.name))
connection_ab = drbdtest.Connection(node_a, node_b)
connection_ab.connect()

pd = drbdtest.PeerDevice(connection_ab, resource.volumes[0])
while True:
    done = pd.event(r'peer-device .* done:([0-9.]+)')
    if float(done[0][0]) > 20.0:
        break

verbose('* Become primary on %s' % (node_a.name))
node_a.primary()
pd.peer_device_options("--c-max-rate=60M")
node_a.run(['dd', 'if=/dev/urandom', 'of=%s' % (node_a.volumes[0].device()) , 'bs=4k', 'count=1'])

node_a.volumes[0].event(r'device .* disk:UpToDate')

connection_ac = drbdtest.Connection(node_a, node_c)
connection_ac.connect()

verbose('* Ensure resync from %s to %s' % (node_a.name, node_c.name))
connection_ca = drbdtest.Connection(node_c, node_a)
connection_ca.event(r'connection .* connection:Connected')
connection_ac.event(r'connection .* connection:Connected')
pd = drbdtest.PeerDevice(connection_ca, resource.volumes[0])
[[repl_state]] = pd.event(r'peer-device .* replication:([^ ]+)')
if repl_state != u'WFBitMapT':
    raise RuntimeError("Expected a resync here but got %s" % (repl_state))

pd.peer_device_options("--c-max-rate=60M")
pd.event(r'peer-device .* replication:Established')

verbose('* Shut down and clean up.')
resource.down()
resource.rmmod()
