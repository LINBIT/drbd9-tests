#! /usr/bin/env python3

import time
from python import drbdtest
from python.drbdtest import log
from subprocess import CalledProcessError
import os

"""
This tests a new DRBD feature, the ability to force an initial resync to happen
on a per-volume basis.
First, two volumes are created. One of them is left as-is, and the other one
gets filled up with a known pattern (a bunch of 'A's).
A connection between the two nodes is established and the resync is forced on
both volumes. The begin and ending of the resync process are asserted.
In the end, the data on volume 1 is checked, so that it is ensured that all 'A's
were actually synced.
"""

resource = drbdtest.setup(min_nodes=2, max_nodes=2)

# create two disks
A = resource.nodes[0]
B = resource.nodes[1]
conn = drbdtest.Connection(A, B)
resource.add_disk('8M')
resource.add_disk('8M')

# write 'A's to volume 1 on node A
A.run(['bash', '-c', 'tr \'\\0\' \'A\' < /dev/zero > {}|| true'.format(A.disks[1].disk)])
A.drbdadm(['create-md', '--force', resource.name])
# ... and zero it out on node B
B.run(['bash', '-c', 'cat /dev/zero > {}|| true'.format(B.disks[1].disk)])
B.drbdadm(['create-md', '--force', resource.name])

A.run(['drbdsetup', 'status', '--verbose'])

resource.up_wait()

log('* Force resync on volume 0 (empty)')
A.run(['drbdsetup', 'new-current-uuid', '--force-resync', '1'])
A.volumes[0].event(r'device .* disk:UpToDate')
conn.event(r'peer-device .* replication:SyncSource')
conn.event(r'peer-device .* replication:Established')

log('* Force resync on volume 1 (with data)')
A.run(['drbdsetup', 'new-current-uuid', '--force-resync', '2'])
A.volumes[1].event(r'device .* disk:UpToDate')
conn.event(r'peer-device .* replication:SyncSource')
conn.event(r'peer-device .* replication:Established')

# verify that the data on volume 1 was transmitted correctly
md5sum = B.run(['bash', '-c', 'dd if={} 2>/dev/null | md5sum'.format(resource.volumes[1].device())],
      return_stdout=True)
log('md5sum: ' + md5sum)

# hash corresponds to 8M of the character 'A'
if md5sum != '806d84898df229fa45ac16346525319d  -':
    raise Exception('Data was not synced correctly!')

# clean up
resource.forbidden_patterns.remove(r'connection:NetworkFailure')
resource.down()

try:
    A.run(['udevadm', 'settle', '--timeout=2'])
except:
    pass

resource.rmmod()
