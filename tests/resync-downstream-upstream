#! /usr/bin/env python3

# This test creates three different versions of the data.
# Then resyncs downstream (that is, between the nodes with the older data).
# Then resyncs upstream.
# This should result in an another downstream resync.

from python import drbdtest
from python.drbdtest import verbose

def connect_and_check(n1, n2):
    cs = drbdtest.Connections()
    cs.bidir_add(n1, n2)
    cs.connect()
    cs.event(r'connection .* connection:Connected')

def wait_sync(node_source, node_target):
    pd_source = drbdtest.PeerDevice(
            drbdtest.Connection(node_source, node_target),
            resource.volumes[0])
    pd_target = drbdtest.PeerDevice(
            drbdtest.Connection(node_target, node_source),
            resource.volumes[0])

    pd_source.event(r'peer-device .* replication:SyncSource')
    pd_source.event(r'peer-device .* replication:Established')
    pd_target.event(r'peer-device .* replication:SyncTarget')
    pd_target.event(r'peer-device .* replication:Established')


# main
resource = drbdtest.setup(min_nodes=3, max_nodes=3)
resource.add_disk('10M')
resource.up_wait()

verbose('* Make up-to-date data available.')
resource.skip_initial_sync()

node_a = resource.nodes[0]
node_b = resource.nodes[1]
node_c = resource.nodes[2]
dev_name = node_a.volumes[0].device()

verbose('* Run test')
resource.connections.from_node(node_c).disconnect()
node_a.run(['dd', 'if=/dev/zero', 'of=' + dev_name,
    'bs=1M', 'count=1', 'conv=fsync'])

resource.connections.from_node(node_b).disconnect()
node_a.run(['dd', 'if=/dev/zero', 'of=' + dev_name,
    'bs=1M', 'count=1', 'seek=1', 'conv=fsync'])

resource.connections.from_node(node_a).disconnect()

verbose('* Start downstream resync.')
connect_and_check(node_b, node_c)

wait_sync(node_b, node_c)

verbose('* Start upstream resync after downstream resync finished')
connect_and_check(node_a, node_b)

wait_sync(node_a, node_b)
wait_sync(node_b, node_c)

connect_and_check(node_a, node_c)

verbose('* Shut down and clean up.')
resource.down()
resource.rmmod()
