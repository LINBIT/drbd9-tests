version = 1

[values]
# KernelPackage is a path to a kernel package file to be installed
KernelPackage = ""
# KernelRelease is the version of the kernel to install from the repositories.
# When neither KernelPackage nor KernelRelease is set, the kernel will not be replaced.
KernelRelease = ""
# KernelRepositoryURL is the URL for the repository containing the kernel package.
KernelRepositoryURL = ""
RepositoryDistribution = "" # for apt, e.g. bionic
ReleaseRepositoryURL = ""
VmTags = ""
NoUpgrade = "" # set to 1 to skip yum/apt upgrade
ReleaseVer = "" # value to be passed to dnf as $releasever
RhelSecretsURL = ""

# Disable SELinux
[[steps]]
[steps.shell]
script = """
if command -v setenforce > /dev/null; then
	echo "Disabling SELinux"
	setenforce 0
	sed -i 's/^SELINUX=.*/SELINUX=disabled/' /etc/selinux/config

	# If selinux-policy-targeted is installed, drbd-utils will try to pull in drbd-selinux, which in turn depends
	# on a "recent" version of selinux-policy. This can cause conflicts when --releasever is set to an older version.
	# Since we're disabling SELinux anyway, we can just remove the package.
	if command -v yum > /dev/null; then
		yum remove -y selinux-policy-targeted || true
	fi
fi
"""

# Disable any banners from being displayed upon login
[[steps]]
[steps.shell]
script = """
touch /root/.hushlogin
"""

# Configure kernel parameters
[[steps]]
[steps.shell]
script = """
# linbit network routes IPv6 traffic over a slow link, so disable it
echo net.ipv6.conf.all.disable_ipv6=1 >> /etc/sysctl.conf
echo net.ipv6.conf.default.disable_ipv6=1 >> /etc/sysctl.conf

# log everything to the console
echo 'kernel.printk = 8 8 8 8' >> /etc/sysctl.conf

sysctl -p
"""

# Disable unwanted services
[[steps]]
[steps.shell]
script = """
# Disable unnecessary updates
units="unattended-upgrades.service apt-daily.timer apt-daily-upgrade.timer"

# Disable services which fail anyway
units="$units kdump.service postfix.service fwupd-refresh.service fwupd-refresh.timer ovirt-guest-agent.service"

for u in $units; do
	if systemctl list-unit-files | grep -Fq $u; then
		systemctl mask --now $u
	fi
done
"""

# Uninstall snapd
[[steps]]
[steps.shell]
script = """
if command -v snap > /dev/null; then
	apt-get purge snapd
fi
"""

# Uninstall bcache-tools
[[steps]]
[steps.shell]
script = """
if [ -f /lib/udev/probe-bcache ]; then
	apt-get purge bcache-tools
fi
"""

[[steps]]
[steps.rsync]
source = "{{ .KernelPackage }}"
dest = "/opt/packages-kernel/"

[[steps]]
[steps.rsync]
source = "scripts/*"
dest = "/usr/local/bin/"

# Set $releasever via dnf vars
[[steps]]
[steps.shell]
script = """
if [ -n "$RELEASEVER" ]; then
	echo "$RELEASEVER" > /etc/dnf/vars/releasever
fi
"""
[steps.shell.env]
RELEASEVER = "{{.ReleaseVer}}"

# Set up upstream RHEL repositories
[[steps]]
[steps.shell]
script = """
if [ -n "$RHEL_SECRETS_URL" ]; then
	curl -fsSL "$RHEL_SECRETS_URL" | tar xzC /run
	inject-rhel-secrets.sh
fi
"""

[steps.shell.env]
RHEL_SECRETS_URL = "{{.RhelSecretsURL}}"

# Install kernel
[[steps]]
[steps.shell]
script = '''
set -e -o pipefail

die() {
	echo -e "$1" >&2
	exit 1
}

mkdir -p /opt/packages-kernel
package_files=$(find /opt/packages-kernel -type f)

[ -z "$KERNEL_RELEASE" -a -z "$package_files" ] && exit 0

# transform "." -> "\." for usage in regexes
kernel_release_regex=${KERNEL_RELEASE//./\\.}

# usage: <regex>
# assert that there is exactly one kernel installed, and that it maches the specified regex
assert_installed_kernel() {
	local regex="$1"
	local installed_kernels=$(find /boot -maxdepth 1 -name 'vmlinu?-*' -printf "%f\n" | grep -v rescue)
	[ $(echo "$installed_kernels" | wc -l) -eq 1 ] || die "Found != 1 installed kernels:\n$installed_kernels"
	echo "$installed_kernels" | grep -Eq "$regex" || die "Installed kernel does not match expected version: $installed_kernels vs. $regex"
}

remove_all_installed_kernels() {
	# This package can block kernel removal, remove it with extreme force.
	# yum autoremove does not like to remove the running kernel, so use rpm -e.
	# --nodeps is required because grub2 sometimes depends on shim-x64.
	rpm -q shim-x64 && rpm -e --nodeps shim-x64

	kernels=$(rpm -qa | grep "^${kernel_prefix}-[0-9]\+")
	for k in $kernels; do
		to_remove=$k

		# On RHEL8 the kernel package is called kernel-core, but we
		# want to remove the kernel metapackage.
		[ "$kernel_prefix" = "kernel-core" ] && to_remove="$to_remove ${k/kernel-core/kernel}"

		# Explicitly remove the modules packages too.
		for package_name in kernel-modules kernel-modules-core kernel-modules-extra; do
			remove_package=${k/$kernel_prefix/$package_name}
			if rpm -q $remove_package >/dev/null 2>&1; then
				to_remove="$to_remove $remove_package"
			fi
		done

		printf "Removing '%s'\n" "$to_remove"
		# yum autoremove does not like to remove the running kernel
		rpm -e $to_remove
	done
}

kernel::rpm() {
	if yum list kernel-core >/dev/null 2>/dev/null; then
		kernel_prefix=kernel-core
	else
		kernel_prefix=kernel
	fi

	if [ -n "$KERNEL_REPOSITORY_URL" ]; then
		repos="--disablerepo=* --enablerepo=drbd-kernel"
		cat <<- EOF > /etc/yum.repos.d/kernel.repo
		[drbd-kernel]
		name=Kernel for DRBD Tests
		baseurl=$KERNEL_REPOSITORY_URL
		gpgcheck=0
		enabled=1
		EOF
	elif [ -n "$RHEL_SECRETS_URL" ]; then
		repos="--disablerepo=* --enablerepo=rhel-baseos,rhel-baseos-eus"
	else
		die "Neither KERNEL_REPOSITORY_URL nor RHEL_SECRETS_URL is set, refusing to install kernel from distro repositories."
	fi

	install_packages=""
	# also install kernel-modules{,-core,-extra} if available
	for package_name in ${kernel_prefix} kernel-modules kernel-modules-core kernel-modules-extra; do
		package_versioned=${package_name}-$KERNEL_RELEASE.$(uname -m)
		if yum --quiet list $repos --showduplicates "$package_versioned" >/dev/null; then
			install_packages="$install_packages $package_versioned"
		fi
	done

	# Clean slate; remove all installed kernels so we can install only the one we want
	remove_all_installed_kernels

	[ -n "$package_files" ] && yum install -y $package_files
	[ -n "$install_packages" ] && yum install -y $repos $install_packages

	assert_installed_kernel "^vmlinuz-${kernel_release_regex}\.x86_64$"
}

# Usage: <regex>
# Searches available packages for a regex, printing the matching package name
deb_regex() {
	apt-cache show "$1" | sed -nr 's/^Package: (.*)$/\1/p'
}

kernel::deb() {
	[ -n "$KERNEL_REPOSITORY_URL" ] && echo deb [trusted=yes] $KERNEL_REPOSITORY_URL $REPOSITORY_DISTRIBUTION main > /etc/apt/sources.list.d/kernel.list
	apt-get update

	install_package=$(deb_regex "^linux-image-${kernel_release_regex}(-generic)?$")

	# Prevent the newest kernel from being installed automatically
	apt-get autoremove -y linux-virtual linux-image-virtual

	dpkg-query -f '${Package}\n' -W "linux-image-*" | grep 'linux-image-[0-9]\+' | sort > /tmp/had
	[ -n "$package_files" ] && apt-get install -y "$package_files"
	apt-get install -y "$install_package"
	dpkg-query -f '${Package}\n' -W "linux-image-*" | grep 'linux-image-[0-9]\+' | sort > /tmp/have

	for k in $(comm -12 /tmp/had /tmp/have); do
		[ "$k" = "$install_package" ] && continue
		apt-get autoremove -y $k linux-image-unsigned-*-generic
	done
	assert_installed_kernel "^vmlinuz-${kernel_release_regex}(-generic)?$"
}

# Set some kernel command line parameters for debugging convenience
sed -i '/GRUB_CMDLINE_LINUX=/s/"\(.*\)"/"\1 nokaslr page_poison=1 crashkernel=no"/' /etc/default/grub

if command -v yum > /dev/null; then
	kernel::rpm
elif command -v apt-get > /dev/null; then
	kernel::deb
else
	echo "Unknown package manager"
	exit 1
fi
rm -f /tmp/ha{d,ve}
'''

[steps.shell.env]
KERNEL_RELEASE = "{{.KernelRelease}}"
KERNEL_REPOSITORY_URL = "{{.KernelRepositoryURL}}"
REPOSITORY_DISTRIBUTION = "{{.RepositoryDistribution}}"
RHEL_SECRETS_URL = "{{.RhelSecretsURL}}"
DEBIAN_FRONTEND = "noninteractive"

# Install packages
[[steps]]
[steps.shell]
script = """
set -e
packages=()

# Read VM_TAGS into array tags without messing up IFS
IFS=";" read -a tags <<< "$VM_TAGS"

for TAG in ${tags[*]}; do
	case $TAG in
	zfs)
		packages+=("zfsutils-linux")
		;;
	tls)
		packages+=("ktls-utils")
		;;
	esac
done

if command -v yum > /dev/null; then
	if [ -n "$RELEASE_REPOSITORY_URL" ]; then
		cat <<- EOF > /etc/yum.repos.d/linbit.repo
		[linbit-internal]
		name=LINBIT Internal
		baseurl=$RELEASE_REPOSITORY_URL
		gpgcheck=0
		enabled=1
		EOF
	fi

	packages+=("iptables" "fio" "lvm2" "make" "python3" "gdisk")
	if ! command -v tc > /dev/null; then
		packages+=("iproute-tc")
	fi
	[ "$NO_UPGRADE" = 1 ] || yum update -y --exclude=kernel*
	yum install -y ${packages[*]}
elif command -v apt-get > /dev/null; then
	[ -n "$RELEASE_REPOSITORY_URL" ] && echo deb [trusted=yes] $RELEASE_REPOSITORY_URL $REPOSITORY_DISTRIBUTION drbd-9 > /etc/apt/sources.list.d/linbit.list

	packages+=("fio" "thin-provisioning-tools" "make" "gdisk")
	apt-get update
	[ "$NO_UPGRADE" = 1 ] || apt-get -y upgrade
	apt-get -y install ${packages[*]}
else
	echo "Unknown package manager"
	exit 1
fi
"""
[steps.shell.env]
RELEASE_REPOSITORY_URL = "{{.ReleaseRepositoryURL}}"
REPOSITORY_DISTRIBUTION = "{{.RepositoryDistribution}}"
DEBIAN_FRONTEND = "noninteractive"
VM_TAGS = "{{ .VmTags }}"
NO_UPGRADE = "{{.NoUpgrade}}"

# Install lbdisttool.py (only for yum)
[[steps]]
[steps.shell]
script = """
if command -v yum > /dev/null; then
	curl -sSLo python-lbdist.tar.gz https://github.com/LINBIT/python-lbdist/archive/master.tar.gz
	tar xvf python-lbdist.tar.gz
	cd python-lbdist-master
	mkdir -p /usr/local/lib/python3.6/site-packages/
	python3 setup.py install
fi
"""
