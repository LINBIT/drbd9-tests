#! /usr/bin/env python
#
# This test configures a 3 node system, one primary. It writes a few blocks
# on the primary, and tricks the secondaries to be a different positions
# in the receive stream.
# Then it wants to witness the reconciliation resync between the secondaries
# after the primary disappeared.

import time
import random
import re
from python import drbdtest
from python.drbdtest import verbose
from subprocess import CalledProcessError

data_amount = 128

random.seed()

def my_verbose(str):
    verbose(str)
    for node in resource.nodes:
        node.run(["echo", str])

def sectors_received(node, res_name, peer_node_name):
    status_str = node.run(["drbdsetup", "status", res_name, "--statistics"], return_stdout=True)
    m = re.search(r'%s role:.*?\n\s+peer-disk:.*\n\s+received:([0-9]+) sent:' % (peer_node_name), status_str)
    if m:
        received = int(m.group(1))
        return received
    else:
        raise Exception("regex not matching. %s" % (status_str))


resource = drbdtest.setup(min_nodes=3, max_nodes=3)
resource.add_disk('10M')
resource.resource_options = 'quorum majority; on-no-quorum io-error;'
resource.net_options = 'ping-int 2;'

resource.up_wait()

my_verbose('* Make up-to-date data available.')
resource.skip_initial_sync()

secondaries_n = resource.nodes
primary_n = random.choice(secondaries_n)
secondaries_n.remove(primary_n)
secondary_slow = random.choice(secondaries_n)
secondaries_n.remove(secondary_slow)
secondary_quick = secondaries_n[0]
conn_slow = drbdtest.Connections()
conn_slow.bidir_add(primary_n, secondary_slow)
conn_quick = drbdtest.Connections()
conn_quick.bidir_add(primary_n, secondary_quick)

primary_n.primary()

my_verbose('* Preparing FS')

dev_name = primary_n.volumes[0].device()

my_verbose('* Blocked network connetion to one peer & writing')
conn_slow.block()

primary_n.run(["dd", "if=/dev/urandom", "of=/tmp/data", "bs=%dk" % (data_amount), "count=1"])
md5sum_p = primary_n.run(['md5sum', '/tmp/data'], return_stdout=True)
# The dd command itself will block since one of the secondaries is not reachable,
# and therefore DRBD will not complete the write before the timeout expires.
# Using setsid and bash background execution to ensure that the teststuite continues
# and does not wait for the dd to terminate.
primary_n.run(["setsid", "bash", "-c", "dd if=/tmp/data of=%s bs=%dk count=1 < /dev/null &> /dev/null &" % (dev_name, data_amount)])

# Wait until the "quick" secondary got at least one of those writes
for i in range(0, 20):
    time.sleep(0.2)
    slow_received = sectors_received(secondary_slow, resource.name, primary_n.name);
    quick_received = sectors_received(secondary_quick, resource.name, primary_n.name);

    if quick_received - slow_received >= data_amount:
        my_verbose('* The quick secondary is at least %d KiB writes ahead' %
                   (quick_received - slow_received))
        break
else:
    raise Exception('No recieve progress!')

resource.forbidden_patterns.difference_update([r'connection:NetworkFailure'])
conn_quick.block()
my_verbose('* Blocked network connetion to both secondaries')
conn_to_primary = resource.connections.to_node(primary_n)
conn_to_primary.event(r'connection .* connection:Unconnected')

conn_to_secondaries = resource.connections.from_node(primary_n)
conn_to_secondaries.event(r'connection .* connection:Unconnected')
#resource.forbidden_patterns.update([r'connection:NetworkFailure'])

forward_c = drbdtest.Connection(secondary_quick, secondary_slow)
backward_c = drbdtest.Connection(secondary_slow, secondary_quick)
forward_pd = drbdtest.PeerDevice(forward_c, resource.volumes[0])
backward_pd = drbdtest.PeerDevice(backward_c, resource.volumes[0])

forward_pd.event(r'peer-device .* replication:SyncSource .* out-of-sync:%d' % (data_amount))
backward_pd.event(r'peer-device .* replication:SyncTarget .* out-of-sync:%d' % (data_amount))

forward_pd.event(r'peer-device .* replication:Established')
backward_pd.event(r'peer-device .* replication:Established')

verbose('* Shut down and clean up.')
primary_n.run(["rm", "/tmp/data"])
primary_n.secondary()
primary_n.down()

secondary_slow.run(["dd", "if=%s" % (dev_name), "of=/tmp/data", "bs=%dk" % (data_amount), "count=1"])
md5sum_ss = secondary_slow.run(['md5sum', '/tmp/data'], return_stdout=True)
secondary_slow.run(["rm", "/tmp/data"])

secondary_quick.run(["dd", "if=%s" % (dev_name), "of=/tmp/data", "bs=%dk" % (data_amount), "count=1"])
md5sum_sq = secondary_quick.run(['md5sum', '/tmp/data'], return_stdout=True)
secondary_quick.run(["rm", "/tmp/data"])

secondary_slow.down()
secondary_quick.down()
resource.rmmod()

if md5sum_p != md5sum_ss or md5sum_p != md5sum_sq:
    raise Exception('Md5 sums differ! %s %s %s' % (md5sum_p, md5sum_sq, md5sum_ss))
