#! /usr/bin/env python3
### vmshed: { "vms_all": [3], "vms_ci": [3], "drbd_version_min": "9.0" }

# This test creates three different versions of the data.
# Then resyncs downstream (that is, between the nodes with the older data).
# Then resyncs upstream.
# This should result in an another downstream resync.

from python import drbdtest
from python.drbdtest import connections, log, peer_devices

def connect_and_check(n1, n2):
    cs = drbdtest.Connections()
    cs.bidir_add(n1, n2)
    cs.connect()
    cs.event(r'connection .* connection:Connected')

def wait_sync(node_source, node_target):
    pd_source = drbdtest.PeerDevice(
            connections(node_source, node_target),
            resource.volumes[0])
    pd_target = drbdtest.PeerDevice(
            connections(node_target, node_source),
            resource.volumes[0])

    pd_source.event(r'peer-device .* replication:SyncSource')
    pd_source.event(r'peer-device .* replication:Established')
    pd_target.event(r'peer-device .* replication:SyncTarget')
    pd_target.event(r'peer-device .* replication:Established')


# main
resource = drbdtest.setup(nodes=3)
resource.add_disk('10M')
resource.up_wait()

log('* Make up-to-date data available.')
resource.skip_initial_sync()

node_a = resource.nodes[0]
node_b = resource.nodes[1]
node_c = resource.nodes[2]

log('* Run test')
connections(node_c).disconnect()
node_a.write(size='1M', bs='1M', end_fsync=1)

connections(node_b).disconnect()
node_a.write(size='1M', bs='1M', offset='1M', end_fsync=1)

connections(node_a).disconnect()

log('* Start downstream resync.')
connect_and_check(node_b, node_c)

wait_sync(node_b, node_c)

log('* Start upstream resync after downstream resync finished')
connect_and_check(node_a, node_b)

wait_sync(node_a, node_b)
wait_sync(node_b, node_c)

connect_and_check(node_a, node_c)

log('* Shut down and clean up.')
resource.down()
resource.teardown()
