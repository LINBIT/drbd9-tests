#! /usr/bin/env python3

# This test creates a "due to diskstates" resync between two nodes that
# have an outdates version of the data. After that both start a resync
# with the owner of the new data, i.e. both become resync target to
# that third node.
# When the later resync (bringing the real data) finishes it sends
# resync finished notifications to both sync sources. Up to recently
# it was ignored on the node that became sync-source with an
# inconsistent disk.

# this bug was fixed in drbd-9.0.23

from python import drbdtest
from python.drbdtest import log

resource = drbdtest.setup(nodes=3)
resource.disk_options = 'c-max-rate 500k;'
resource.add_disk('10M')

resource.up_wait()
log('* Make up-to-date data available.')
resource.skip_initial_sync()

node_a, node_b, node_c = resource.nodes
connection_c_b = resource.connections.from_node(node_c).to_node(node_b)
connection_a_b = resource.connections.from_node(node_a).to_node(node_b)
connection_a_c = resource.connections.from_node(node_a).to_node(node_c)
peer_device_c_b = node_c.volumes[0].peer_devices.to_node(node_b)
connections_a = resource.connections.from_node(node_a)
volume_a = node_a.volumes[0]
volume_b = node_b.volumes[0]
volume_c = node_c.volumes[0]

log('* Preparing.')
connection_c_b.disconnect()
connections_a.disconnect()
volume_a.write(bs=1024*1024, count=1, flags=['oflag=direct'])
node_a.down()
node_c.down()
node_b.down()
node_a.up()
node_a.primary()
connections_a.disconnect()
node_c.up()
connection_c_b.disconnect()
node_b.up()

log('* Start resync from the ahead node.')
connection_a_b.connect()
volume_b.event(r'device .* disk:Inconsistent')

log('* Let the two behinds connect')
connection_c_b.connect()
peer_device_c_b.event(r'peer-device .* replication:(PausedSyncS|PausedSyncT)')

log('* Start resync from ahead to source node.')
connection_a_c.connect()

log('* Verify.')
volume_c.event(r'device .* disk:UpToDate', r'peer-device .* peer-node-id:%d .* replication:Established' % node_b.id)

log('* Shut down and clean up.')
node_a.secondary()
resource.rmmod()
