#! /usr/bin/env python3
### vmshed: { "vms_all": [3], "vms_ci": [3] }
# Pass this script a list of host names to use as the test nodes.

# This test verifies that peer-acks serve their purpose.
# 1) two diskfull secondaries do not build up out-of-sync bits towards each
#    other when they receive writes from 3rd primary.
# 2) That recent writes which where not peer-acked are getting marked as
#    out of sync in the bitmap when the connection to the primary gets lost.

import json
import time
from python import drbdtest
from python.drbdtest import log

M_PEER_ACKED=1
M_NOT_PEER_ACKED=2

def do_test(mode):
    if mode == M_PEER_ACKED:
        res_opt_str = '--peer-ack-delay=100' # default 100ms
        sleep_time = 0.4 # 4 times that should be enough
        verb_str = "gets through/no resync"
        reconnect_regex = r'peer-device .* replication:Established .* out-of-sync:0'
    elif mode == M_NOT_PEER_ACKED:
        res_opt_str = '--peer-ack-delay=1000' # 1second
        sleep_time = 0 # do not wait, should cause peer_ack to not get through
        verb_str = "does not get through/resync"
        reconnect_regex = r'peer-device .* replication:SyncTarget .* out-of-sync:[1-9][0-9]*'

    log('* verify peer-ack %s' % (verb_str))
    other_target_c.disconnect()
    target_other_c.disconnect()

    diskless_n.resource_options([res_opt_str])
    diskless_n.fio_file('/mnt/1/file', rw='write', ioengine='sync', size='8K', direct=1)
    time.sleep(sleep_time)

    if mode == M_NOT_PEER_ACKED:
        diskless_target_c.disconnect()
        target_diskless_c.event(r'connection .* connection:Unconnected')

        result = target_n.run(['drbdsetup', 'status', resource.name, '--json'], return_stdout=True)
        status = json.loads(result)[0]
        connection_status = next(c for c in status['connections'] if c['peer-node-id'] == other_n.id)
        # We actually expect more than 8 bits because we are writing to a filesystem.
        if connection_status['peer_devices'][0]['out-of-sync'] < 8:
            raise Exception("bit(s) not set for the not peer-acked write-request(s)")
        # Create a new current UUID on the primary.
        diskless_n.fio_file('/mnt/1/file', rw='write', ioengine='sync', size='4K', direct=1)

    target_other_c.connect()
    other_target_c.connect()
    target_other_pd.event(reconnect_regex)
    other_target_pd.event(r'peer-device .* replication:Established')

    if mode == M_NOT_PEER_ACKED:
        diskless_target_c.connect()
        diskless_target_c.event(r'connection .* connection:Connected')

# main

resource = drbdtest.setup(nodes=3)
diskless_n, target_n, other_n = resource.nodes
diskful_nodes = drbdtest.Nodes([target_n, other_n])
resource.add_disk('10M', diskful_nodes=diskful_nodes)
resource.up_wait()

log('* Make up-to-date data available.')
resource.skip_initial_sync();

vol = resource.volumes[0]
other_target_c = drbdtest.Connection(other_n, target_n)
other_target_pd = drbdtest.PeerDevice(other_target_c, other_n.volumes[0])
target_other_c = drbdtest.Connection(target_n, other_n)
target_other_pd = drbdtest.PeerDevice(target_other_c, target_n.volumes[0])
diskless_target_c = drbdtest.Connection(diskless_n, target_n)
target_diskless_c = drbdtest.Connection(target_n, diskless_n)
target_diskless_pd = drbdtest.PeerDevice(target_diskless_c, target_n.volumes[0])

diskless_n.primary()
dev_name = diskless_n.volumes[0].device()
diskless_n.run(['mkfs.ext4', '-Elazy_itable_init=0', '-Elazy_journal_init=0',
            '-Enodiscard', dev_name])
diskless_n.run(['mkdir', '-p', '/mnt/1'])
diskless_n.run(['mount', dev_name, '/mnt/1'])

for mode in [M_PEER_ACKED, M_NOT_PEER_ACKED]:
    do_test(mode)

diskless_n.run(['umount', '/mnt/1'])
diskless_n.secondary()
resource.connections.to_node(diskless_n).event(r'connection .* role:Secondary')

diskless_n.down()
diskful_nodes.down()
resource.teardown(validate_dmesg=False)
