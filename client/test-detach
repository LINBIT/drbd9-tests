#! /bin/bash

# Pass this script a list of host names to use as the test nodes.

. ${0%/*}/setup.sh

setup --disk=10M --disk=10M "$@"

_up
_force_primary
_initial_resync

DEVICE1=$(on "${NODES[0]}" drbdadm sh-dev ${DRBD_TEST_JOB}/1)
DEVICE2=$(on "${NODES[0]}" drbdadm sh-dev ${DRBD_TEST_JOB}/2)

on "${NODES[0]}" io-load-dd --count=100 --oflag=sync --repeat=forever $DEVICE2
sleep 1  # Ensure that some I/O happens before the next steps

for node in "${NODES[@]}"; do
    on "$node" drbdadm detach ${DRBD_TEST_JOB}/1
    volume_event "$node:1" -y ' device .* disk:Diskless'
done

for node in "${NODES[@]}"; do
    on "$node" drbdadm del-minor ${DRBD_TEST_JOB}/1
    volume_event "$node:1" -y ' destroy device '
done

for node in "${NODES[@]}"; do
    on "$node" drbdadm new-minor ${DRBD_TEST_JOB}/1
    volume_event "$node:1" -y ' create device '
done

# FIXME: DRBD does not handle concurrent attach correctly
for node in "${NODES[@]}"; do
    if [ "$node" = "${NODES[0]}" ]; then
	on "$node" drbdadm attach ${DRBD_TEST_JOB}/1
	# The node doing the attach first, goes straight to UpToDate
	volume_event "$node:1" -y ' device .* disk:UpToDate'
    else
	# The other nodes that see that, will go though Negotiating first
	volume_event "$node:1" -y ' peer-device .* peer-disk:UpToDate'
	on "$node" drbdadm attach ${DRBD_TEST_JOB}/1
	volume_event "$node:1" -y ' device .* disk:Negotiating'
	volume_event "$node:1" -y ' device .* disk:UpToDate'
    fi
done

on "${NODES[0]}" io-load-dd --stop $DEVICE2
on "${NODES[0]}" drbdadm secondary ${DRBD_TEST_JOB}
event "${NODES[0]}" -y ' resource .* role:Secondary'

_down
_rmmod
