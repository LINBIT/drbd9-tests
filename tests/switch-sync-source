#! /usr/bin/env python3
### vmshed: { "vms_all": [3], "vms_ci": null, "drbd_version_min": "9.0" }

# This test is run on a 3-node cluster.
#   A = primary; B, C = secondary
#
# 1) Trigger a resync (Source = A, Target = B and C)
#    - Cut all connections to A
#    - Write data on A
#    - Reconnect A
#    (Important: connection A-C is much slower than A-B, so
#    that B definitely finishes first)
#
# 2) When B is done syncing (but C isn't yet), kill A
#    to pull away C's SyncSource
#
# Result: B should become SyncSource for C and sync should continue


from python import drbdtest
from python.drbdtest import connections, log, peer_devices
from python import trafficcontrol

resource = drbdtest.setup_resource(nodes=3)
resource.net_options = 'ping-timeout 5; ping-int 1; connect-int 1;'
primary, fast, slow = resource.nodes

primary_tc = trafficcontrol.TrafficControl(primary, resource.nodes)

resource.add_disk('128M')
resource.up_wait()

log('* Make up-to-date data available.')
resource.skip_initial_sync()

primary.primary()
log('* All nodes connected')

fast.detach()
slow.detach()

# ensure "fast" node finishes before "slow" node
primary_tc.slow_down(slow, speed='100mbit')

c = connections(to_node=primary)

primary.write(size='100M', end_fsync=1)

fast.attach()
slow.attach()

fast.event('response helper .* helper:after-resync-target')
primary.down()

slow.event('response helper .* helper:after-resync-target')

log('* Shut down and clean up.')
fast.down()
slow.down()
primary_tc.reset()
resource.cluster.teardown()
