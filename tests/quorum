#! /usr/bin/env python3
#
# 1st part: Isolation of a primary node, with making sure it sees
#           one peer going away before the a write and the other
#           peer going away after that write
#
# 2nd part: covers the quorum mechanism with all nodes having disks:
#  * on-no-quorum io-error
#  * Last man standing optimization
#
# Remaining TODOs:
#  * Check that if Quorum a quorum lost node becomes sync source
#    if the other partition (that has quorum) does not begin a new
#    data generation.
#  * on-no-quroum freeze-io
#  * quorum-minimum-redundancy
#  * quorum handling on diskless nodes
#
import time
import random
from python import drbdtest
from python.drbdtest import log
from subprocess import CalledProcessError

random.seed()

def write_on_node(node):
    node.volumes.write(direct=1)

def my_log(str):
    log(str)
    for node in resource.nodes:
        node.run(["echo", str])

resource = drbdtest.setup(min_nodes=3, max_nodes=5)
resource.add_disk('10M')
resource.resource_options = 'quorum majority; on-no-quorum io-error; twopc-timeout 100;'

resource.up_wait()

my_log('* Make up-to-date data available.')
resource.skip_initial_sync()

partition_a = drbdtest.Nodes(resource.nodes)
partition_b = drbdtest.Nodes()
primary_a = random.choice(partition_a)
secondaries_a = drbdtest.Nodes(partition_a)
secondaries_a.remove(primary_a)
my_log('* %s is the primary' % primary_a.name)
primary_a.primary()
write_on_node(primary_a)

my_log('* Isolating the primary, while writing at the same time')
tmp_pri = random.choice(secondaries_a)
remaining_a = drbdtest.Nodes(secondaries_a)
remaining_a.remove(tmp_pri)
tmp_old_pri = drbdtest.Connection(tmp_pri, primary_a)
connections_to_cut = remaining_a.connections.to_node(primary_a)
connections_witness = resource.connections.from_node(primary_a)

resource.forbidden_patterns.difference_update([
    r'connection:NetworkFailure',
    r'connection:BrokenPipe',
    r'connection:ProtocolError'
])

tmp_old_pri.disconnect(wait = True, force = True)

connections_to_cut.block(jump_to="REJECT")
connections_to_cut.disconnect(wait = False, force = True)

try:
    write_on_node(primary_a)
    raise RuntimeError('Quorum was not lost, although expected!')
except CalledProcessError:
    pass # Expect the IO error in case quorum was lost

connections_to_cut.unblock(jump_to="REJECT")

connections_to_cut.event(r'connection .* connection:StandAlone')
connections_witness.event(r'connection .* connection:(BrokenPipe|NetworkFailure|ProtocolError)')

primary_a.secondary() # Yes!
tmp_pri.primary()
write_on_node(tmp_pri)

tmp_old_pri.connect()
# Alternatively move connections_to_cut.connect() up here...

primary_a.volumes[0].event(r'disk:Inconsistent')
primary_a.volumes[0].event(r'disk:UpToDate')
# This is the rollback "last writes" on primary that lost quorum resync.
# If it does not happen we have a bug!
# (Those writes were never completed with an error to the upper layers,
#  but submitted to the local disk)

connections_to_cut.connect()
connections_to_cut.event(r'connection .* connection:Connected')

time.sleep(0.2) # Otherwise we trigger weird follow-on race conditions

tmp_pri.secondary()

time.sleep(0.5) # Otherwise we trigger weird follow-on race conditions

primary_a.primary()
write_on_node(primary_a)


# part2
my_log('* Remove secondaries one by one until the partition lost quorum')

while len(partition_b) < len(partition_a):
    moving = random.choice(secondaries_a)
    my_log('* %s breaks away' % moving.name)

    partition_a.remove(moving)
    secondaries_a.remove(moving)

    connections_to_cut = resource.connections.from_node(moving)
    connections_witness = partition_a.connections.to_node(moving)

    # We will break connection when removing nodes from the first partition
    resource.forbidden_patterns.difference_update([
        r'connection:NetworkFailure',
        r'connection:BrokenPipe',
        r'connection:ProtocolError'
    ])

    moving.block_paths(jump_to="REJECT")
    connections_to_cut.disconnect(wait = False, force = True)
    moving.unblock_paths(jump_to="REJECT")

    try:
        write_on_node(primary_a)
    except CalledProcessError:
        pass # Expect the IO error in case quorum was lost

    connections_to_cut.event(r'connection .* connection:StandAlone')
    connections_witness.event(r'connection .* connection:(BrokenPipe|NetworkFailure|ProtocolError)')

    resource.forbidden_patterns.update([
        r'connection:NetworkFailure',
        r'connection:BrokenPipe',
        r'connection:ProtocolError'
    ])

    connections_new = partition_b.bidir_connections_to_node(moving)
    connections_new.connect()

    partition_b.add(moving)

my_log('* Now the partition A lost quorum')
primary_a.volumes[0].event(r'quorum:no')

moving = primary_a
moving.secondary()
primary_b = random.choice(partition_b)

if len(partition_b) == len(partition_a):
    # The test was run with an even number of nodes...
    partition_a.remove(moving)
    secondaries_a.remove(moving)

    connections_disconnect = drbdtest.Connections()
    for node in partition_a:
        connections_disconnect.add(drbdtest.Connection(moving, node))
    connections_disconnect.disconnect()

    connections_new = drbdtest.Connections()
    connections_witness = drbdtest.Connections()
    for node_b in partition_b:
        connections_new.add(drbdtest.Connection(node_b, moving))
        connections_witness.add(drbdtest.Connection(moving, node_b))

    connections_new.connect()
    connections_witness.event(r'connection .* connection:Connected')

    moving.volumes[0].event(r'disk:Inconsistent')
    moving.volumes[0].event(r'disk:UpToDate')
    partition_b.add(moving)
else:
    # Partition b is already bigger than a
    primary_b.volumes[0].event(r'quorum:yes')

my_log('* %s is the new primary' % primary_b.name)
primary_b.primary()
write_on_node(primary_b)

my_log('* Joining the remaining nodes from partition A to partition B')
# now connect secondaries_a to partition_b
connections_new = drbdtest.Connections()
connections_witness = drbdtest.Connections()
for node_a in partition_a:
    for node_b in partition_b:
        connections_new.add(drbdtest.Connection(node_b, node_a))
        connections_witness.add(drbdtest.Connection(node_a, node_b))

resource.forbidden_patterns.difference_update([
    r'connection:BrokenPipe',
    r'connection:ProtocolError'
])

connections_new.connect()
connections_witness.event(r'connection .* connection:Connected')
connections_new.event(r'connection .* connection:Connected')

# ensure that partition_b sees the just joined disks as D_UP_TO_DATE
peer_devices = drbdtest.PeerDevices()
for connection in connections_new:
    peer_devices.add(drbdtest.PeerDevice(connection, connection[1].volumes[0]))

peer_devices.event(r'peer-device .* peer-disk:UpToDate')

#resource.forbidden_patterns.update([
#    r'connection:BrokenPipe',
#    r'connection:ProtocolError'
#])


for node in partition_a:
    partition_b.add(node)
partition_a = drbdtest.Nodes()

my_log('* Verifying the "last man standing" mechanism')
secondaries_b = drbdtest.Nodes(partition_b)
secondaries_b.remove(primary_b)

for node_b in secondaries_b:
    node_b.down()
    write_on_node(primary_b)

primary_b.secondary()
primary_b.down()

try:
    primary_b.run(['udevadm', 'settle', '--timeout=2'])
except:
    pass

resource.rmmod()
