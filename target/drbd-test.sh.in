log() {
    logger "$@"
}

doit() {
    local status

    log -t "${0##*/}" -- "$@"
    "$@" || status=$?
    [ -z "$status" ] || log -t "${0##*/}" -- "(failed with status $status)"
    return $status
}

# Convert arguments into a form which the shell can evaluate
quote_command() {
    set -- "$(printf '%q ' "$@")"
    echo "${1% }"
}

register_cleanup() {
    local options=`getopt -o +j:t --long job: -- "$@"` || return
    eval set -- "$options"
    local job=$DRBD_TEST_JOB type=persistent opt_t
    while :; do
	case "$1" in
	-j|--job)
	    job=$2
	    shift
	    ;;
	-t)
	    opt_t=$1
	    type=transient
	    ;;
	--)
	    shift
	    break
	esac
	shift
    done
    [ -n "$job" ] || return 0

    log -t register-cleanup -- $opt_t "$@"

    set -- "$(quote_command "$@")"

    if [ "$type" = transient ]; then
	if ! mountpoint -q "@DRBD_TEST_VAR@/$type"; then
	    mkdir -p "@DRBD_TEST_VAR@/$type"
	    mount -t tmpfs tmpfs "@DRBD_TEST_VAR@/$type"
	fi
    fi

    (
	mkdir -p "@DRBD_TEST_VAR@/$type/$job"
	cd "@DRBD_TEST_VAR@"
	for ((n = 1; ; n++)); do
	    jobfile=$type/$job/cleanup-0.$n
	    if ! [ -e "transient/$job/cleanup-0.$n" -o \
		   -e "persistent/$job/cleanup-0.$n" ]; then
		cat > "$jobfile" <<EOF
#! /bin/bash
set -e
export PATH=@DRBD_TEST_DATA@:$PATH
$1
rm -f "$jobfile"
EOF
		chmod +x "$jobfile"
		break
	    fi
	done
    )
}
