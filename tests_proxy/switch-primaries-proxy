#! /usr/bin/env python3

# Pass this script a list of host names to use as the test nodes.

import random
import sys
from subprocess import CalledProcessError

from python import drbdtest
from python.drbdtest import log

sys.argv.extend(['--proxy'])

resource = drbdtest.setup(nodes=2)

resource.add_disk('4M')

resource.up_wait()
resource.skip_initial_sync()


# switch the primary role around
# could be done via autopromote, too.

for i in range(40):
    node = random.choice(resource.nodes)
    others = resource.nodes.difference( [node] )
    log('Loop #%d: node %s' % (i, node))
    node.primary()
    node.fio(drbdtest.fio_write_args)
    node.secondary()
    others.event(r'connection .* role:Primary')
    others.event(r'connection .* role:Secondary')

# If that did work, run again _without_ event checking ... this way the transitions happen faster.
for i in range(40):
    node = random.choice(resource.nodes)
    log('Unchecked loop #%d: node %s' % (i, node))
    node.primary()
    node.secondary()

# and once more, with implicit transitions via open()
for i in range(40):
    node = random.choice(resource.nodes)
    log('open loop #%d: node %s' % (i, node))
    node.fio(drbdtest.fio_write_args)


first = resource.nodes[0]
others = resource.nodes.difference( [first] )
# Ensure all are still running fine, by causing an event that can be waited for
resource.connections.from_node(first).disconnect()
first.primary()
resource.connections.from_node(first).connect()
others.event(r'connection .* role:Primary')
first.secondary()

log('* Shut down and clean up.')
try:
    resource.down()
except:
    pass
resource.teardown()
