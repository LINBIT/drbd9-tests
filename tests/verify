#! /usr/bin/env python3
### vmshed: { "vms_all": [2], "vms_ci": [2], "drbd_version_min": "8.4" }

# Pass this script a list of host names to use as the test nodes.

import re
import time

from python import drbdtest
from python.drbdtest import connections, log, peer_devices
from subprocess import CalledProcessError
from io import StringIO

resource = drbdtest.setup_resource(nodes=2)

resource.add_disk('17M')
resource.net_options = 'verify-alg md5;'

resource.up_wait()
# no sync, we want it to be zeroed out anyway.
resource.skip_initial_sync()

first = resource.nodes[0]
others = resource.nodes.difference([first])
other = others[0]


# Make them all NUL

with first.asPrimary():
    first.run(['/bin/bash', '-c',
              "dd if=/dev/zero of=%s bs=1M count=16 oflag=sync || true" % resource.volumes[0].device()])

# Now create differences between the nodes, and test verification.


# verify block size. No sense in going smaller.
BLOCK_SIZE = 4096
BLOCK_SIZE_2COMPARE = BLOCK_SIZE - 10

make_difference_blob = (("-" * 63) + "\n") * (BLOCK_SIZE//64)

def MakeDifference(node, do_changes):
    blocks = []
    if do_changes == 0:
        return blocks

    # DRBD metadata requires (much) less than 1M.
    # So the device size is at least 16M.
    # Arbitrarily choose block numbers in this range, but include an adjacent pair.
    # That is, less than 16M/BLOCK_SIZE == 4096
    for blk_nr in [99, 1340, 1341, 3980]:
        byte = blk_nr * BLOCK_SIZE

        # No ' in string, so that "mark a string" in logfile works ;)
        text = ("Writing on {%s} at {%s}; to offset %d = 0x%x.\n" %
                (node.name, time.ctime(),
                 byte, byte))
        log(text)

        block = text + make_difference_blob[len(text):]

        node.run(["dd",
                "of=%s" % resource.volumes[0].disk,
                "seek=%d" % blk_nr,
                "bs=%d" % BLOCK_SIZE, "count=1", "oflag=direct"],
                stdin=StringIO(block))

        blocks.append( (byte, blk_nr, block) )

    return blocks


def CheckContent(node, blocks):
    for blk in blocks:
        (byte, blk_nr, block) = blk

        content = node.run(["dd",
                "if=%s" % resource.volumes[0].disk,
                "skip=%d" % blk_nr,
                "bs=%d" % BLOCK_SIZE, "count=1", "iflag=direct"],
                return_stdout=True)

        lines = content.split("\n")
        log("node %s has '%s'\n" % (node, lines[0]))

        # There's a problem with 4kB, only check a bit less.
        drbdtest.ensure(block[:BLOCK_SIZE_2COMPARE], content[:BLOCK_SIZE_2COMPARE])

    return True


def GetDifferenceFromDmesg(node, dmesg_text):
    # DRBD 8.4:
    #   [   30.661351] block drbd1: Out of sync: start=792, size=8 (sectors)
    # DRBD 9:
    #   [4508806.959591] drbd ramdisk/0 drbd28 much: Out of sync: start=40, size=16 (sectors)
    pattern = re.compile(r'drbd{}[ :].* Out of sync:.*start=(\d+), size=(\d+)'.format(node.volumes[0].minor))

    blks = []
    for line in dmesg_text.split('\n'):
        match = pattern.search(line)
        if not match:
            continue

        log("on node {} matching line: {}".format(node, line))

        sector = int(match.group(1))
        length = int(match.group(2))

        while True:
            byte = sector * 512
            blks.append(byte)
            sector += BLOCK_SIZE // 512
            length -= BLOCK_SIZE // 512
            if length == 0:
                break

        drbdtest.log("on node %s found change at sector %d (byte %d, 0x%x)" % (node, sector, byte, byte))

    # [4508807.046923] drbd ramdisk/0 drbd28 much: Online verify found 2 4k block out of sync!
    return set(blks)


def RemoveCapture(node, dmesg_stream):
    node.host.remove_dmesg_capture(dmesg_stream)
    dmesg_stream.seek(0)
    return dmesg_stream.read()


def DoVerify(src_node, dst_node, expected):
    src_dmesg = StringIO()
    dst_dmesg = StringIO()
    src_node.host.add_dmesg_capture(src_dmesg)
    dst_node.host.add_dmesg_capture(dst_dmesg)

    src_node.drbdadm(['verify', resource.name])

    src_node.peer_devices.event(r'peer-device .* replication:VerifyS')
    dst_node.peer_devices.event(r'peer-device .* replication:VerifyT')

    src_node.peer_devices.event(r'peer-device .* replication:Established')
    dst_node.peer_devices.event(r'peer-device .* replication:Established')

    src_dmesg_text = RemoveCapture(src_node, src_dmesg)
    dst_dmesg_text = RemoveCapture(dst_node, dst_dmesg)
    if expected:
        src_blks = GetDifferenceFromDmesg(src_node, src_dmesg_text)
        dst_blks = GetDifferenceFromDmesg(dst_node, dst_dmesg_text)

        drbdtest.ensure(src_blks, dst_blks)
        drbdtest.ensure(src_blks, set([ l[0] for l in expected ]))


def DoSync(node1, node2):
    node1.disconnect(node2, wait=True)
    node1.drbdadm(["new-current-uuid", "%s/0" % resource.name])
    node1.connect(node2)
    node1.event(r'connection .* connection:Connected')
    node2.event(r'connection .* connection:Connected')
    node1.peer_devices.event(r'peer-device .* replication:SyncSource')
    node1.peer_devices.event(r'peer-device .* replication:Established')
    node2.peer_devices.event(r'peer-device .* replication:SyncTarget')
    node2.peer_devices.event(r'peer-device .* replication:Established')


for with_changes in (0, 1):
    w_c_text = "with changes" if with_changes else "no changes"

    drbdtest.log("*** 1) Primary verifies against Secondary, %s" % w_c_text)

    with first.asPrimary():
        changed = MakeDifference(first, with_changes)
        DoVerify(first, other, changed)
        DoSync(first, other)
        for n in resource.nodes:
            CheckContent(n, changed)


    drbdtest.log("*** 2) Secondary verifies against Primary, %s" % w_c_text)

    with first.asPrimary():
        changed = MakeDifference(first, with_changes)
        DoVerify(other, first, changed)
        DoSync(first, other)
        for n in resource.nodes:
            CheckContent(n, changed)


    # TODO: which should/would win??
    # drbdtest.log("*** 3) Secondary to Secondary")
    # with first.asPrimary():
    #     changed = MakeDifference(first)
    # DoVerify(first, other, changed)
    # DoSync(other, first)
    # for n in resource.nodes:
    #     CheckContent(n, changed)

resource.down()
resource.cluster.teardown()
