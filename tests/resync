#! /bin/bash

# Pass this script a list of host names to use as the test nodes.

TOP=${0%/*}/..
. $TOP/lib/setup.sh

setup --min-nodes=3 --disk=10M "$@"

first_node="${NODES[0]}"
device=$(on "$first_node" drbdadm sh-dev $RESOURCE/1)
block_size=4096
cb=0

test_log() {
    [ -z "$V" ] || echo "$@"
    on "${NODES[$idx]}" logger "$@"
}

assert_resync_direction() {
    local from=$1
    local to=$2

    peer_device_event "$from:$to:1" -y 'peer-device .* replication:WFBitMapS'
    peer_device_event "$from:$to:1" -y 'peer-device .* replication:SyncSource'
    peer_device_event "$from:$to:1" --timeout=60 -y 'peer-device .* replication:Established'
    peer_device_event "$to:$from:1" -y 'peer-device .* replication:SyncTarget'
    peer_device_event "$to:$from:1" -y 'peer-device .* replication:Established'
}

disconnect_reverse() {
    local node=$1
    local i from

    for ((i=${#NODES[@]}-1; i>=0; i--)); do
	from="${NODES[$i]}"
	if [ "$from" != "$node" ]; then
	    on $node drbdadm disconnect $RESOURCE:$from
	fi
    done
}

test_log resource up on all nodes
_up
test_log waiting for connections to establish
_wait_connected
_force_primary
test_log waiting for initial resync
_initial_resync

test_log Phase I disconnecting
# Disconnect all nodes, last first, writing something between every action
for (( idx=${#NODES[@]}-1 ; idx>=1 ; idx-- )) ; do
    on "$first_node" dd if=/dev/urandom bs=$block_size count=1 of=$device seek=$cb oflag=sync
    cb=$(( cb + 1 ))

    test_log on "${NODES[$idx]}" drbdadm disconnect $RESOURCE
    on "${NODES[$idx]}" drbdadm disconnect $RESOURCE
    #disconnect_reverse "${NODES[$idx]}"

    closed_connections=()
    for (( i=0 ; i < idx ; i++ )); do
	closed_connections[$i]="${NODES[$i]}:${NODES[$idx]}"
    done

    test_log asserting disconnect "${closed_connections[@]}"
    connection_event "${closed_connections[@]}" -y 'connection .* connection:TearDown'
    connection_event "${closed_connections[@]}" -y 'connection .* connection:Connecting'
done

on "$first_node" dd if=/dev/urandom bs=$block_size count=1 of=$device seek=$cb oflag=sync
cb=$(( cb + 1 ))

on "$first_node" drbdadm secondary $RESOURCE

test_log Phase II connecting
# Connect them beginning from the last to the previous, assert resync direction
for (( idx=${#NODES[@]}-1 ; idx>=2 ; idx-- )) ; do
    n1=${NODES[$idx-1]}
    n2=${NODES[$idx]}
    test_log on "$n1" drbdadm connect "$RESOURCE:$n2"
    on "$n1" drbdadm connect "$RESOURCE:$n2"
    test_log on "$n2" drbdadm connect "$RESOURCE:$n1"
    on "$n2" drbdadm connect "$RESOURCE:$n1"
    test_log asserting resync from $n1 to $n2
    assert_resync_direction $n1 $n2
    for (( j=idx ; j<${#NODES[@]}-1 ; j++)); do
	n1=${NODES[$j]}
	n2=${NODES[$j+1]}
	test_log "asserting follow-up resync from $n1 to $n2"
	assert_resync_direction $n1 $n2
    done
done

# Now connect last to the first
test_log Phase III more follow-up testing
last_node=${NODES[${#NODES[@]}-1]}
test_log on "${last_node}" drbdadm connect "$RESOURCE:${params["$first_node:FULL_HOSTNAME"]}"
on "${last_node}" drbdadm connect "$RESOURCE:${params["$first_node:FULL_HOSTNAME"]}"
test_log asserting resync form $first_node to $last_node
assert_resync_direction $first_node $last_node

for (( idx=${#NODES[@]}-1 ; idx>=2 ; idx-- )) ; do
    n1=${NODES[$idx]}
    n2=${NODES[$idx-1]}

    test_log asserting follow-up resync form $n1 to $n2
    assert_resync_direction $n1 $n2
done

test_log Phase IV establish the remaining connections
on "${NODES[@]}" drbdadm adjust $RESOURCE

newly_established_connections=("${NODES[0]}:${NODES[1]}")
k=1
for ((i=0 ; i < ${#NODES[@]}-2 ; i++)); do
    inner_limit=$((i == 0 ? ${#NODES[@]}-1 : ${#NODES[@]}))
    for ((j=i+2 ; j < inner_limit ; j++)); do
	newly_established_connections[$k]="${NODES[$i]}:${NODES[$j]}"
	k=$((k+1))
    done
done
test_log asserting no resync "${newly_established_connections[@]}"

newly_established_vols="${newly_established_connections[@]/%/:1}"
add_forbidden_patterns 'peer-disk:SyncSource' 'peer-disk:SyncTarget'
peer_device_event ${newly_established_vols[@]} -y 'peer-device .* replication:Established'
remove_forbidden_patterns 'peer-disk:SyncTarget' 'peer-disk:SyncSource'

# FIXME: verify the disk contents!

_down
_rmmod
