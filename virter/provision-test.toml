[values]
RepositoryURL = ""
DrbdRepositoryURL = ""
ReleaseRepositoryURL = ""
RepositoryDistribution = "" # for apt, e.g. bionic
RepositoryPackages = "" # comma separated
DrbdVersion = ""
DrbdVersionOther = ""

[[steps]]
[steps.rsync]
source = "packages/*"
dest = "/opt/packages/"

[[steps]]
[steps.rsync]
source = "virter/scripts/*"
dest = "/usr/local/bin/"

[[steps]]
[steps.shell]
script = '''
set -e

die() { >&2 printf "\nError: %s\n" "$*"; exit 1; }

download_dir="/opt/package-download"

packages=$(printf %s "$REPOSITORY_PACKAGES" | tr , " ")

[ -z "$DRBD_REPOSITORY_URL" ] && DRBD_REPOSITORY_URL="$REPOSITORY_URL"

if command -v yum > /dev/null; then
	# Cheap hack to allow versions to be specified the same for apt and yum
	packages=$(printf %s "$packages" | tr = -)

	if [ -n "$REPOSITORY_URL" ] && [ -n "$DRBD_REPOSITORY_URL" ]; then
		cat <<- EOF > /etc/yum.repos.d/drbd.repo
		[drbd]
		name=DRBD Packages
		baseurl=$DRBD_REPOSITORY_URL
		gpgcheck=0
		enabled=1
		EOF

		if [ "$REPOSITORY_URL" != "$DRBD_REPOSITORY_URL" ]; then
			cat <<- EOF > /etc/yum.repos.d/drbd-extra.repo
			[drbd-extra]
			name=DRBD Extra Packages
			baseurl=$REPOSITORY_URL
			gpgcheck=0
			enabled=1
			EOF
		fi
	fi

	if [ -n "$RELEASE_REPOSITORY_URL" ]; then
		cat <<- EOF > /etc/yum.repos.d/linbit.repo
		[linbit-internal]
		name=LINBIT Internal
		baseurl=$RELEASE_REPOSITORY_URL
		gpgcheck=0
		enabled=1
		EOF
	fi

	[ -d /opt/packages ] && packages="$packages $(find /opt/packages -maxdepth 1 -name "*.rpm")"
elif command -v apt-get > /dev/null; then
	[ -n "$REPOSITORY_URL" ] && echo deb [trusted=yes] $REPOSITORY_URL $REPOSITORY_DISTRIBUTION main > /etc/apt/sources.list.d/drbd.list
	[ -n "$RELEASE_REPOSITORY_URL" ] && echo deb [trusted=yes] $RELEASE_REPOSITORY_URL $REPOSITORY_DISTRIBUTION drbd-9 > /etc/apt/sources.list.d/linbit.list
	apt-get update

	[ -d /opt/packages ] && packages="$packages $(find /opt/packages -maxdepth 1 -name "*.deb")"
else
	die "Unknown package manager"
fi

# Download the "other" version first so that the package manager does not
# refuse because the package is already installed.
if [ -n "$DRBD_VERSION_OTHER" ]; then
	download-drbd-package.sh "$DRBD_VERSION_OTHER"
fi

if [ -n "$DRBD_VERSION" ]; then
	download-drbd-package.sh "$DRBD_VERSION"
	drbd_package="$download_dir/$DRBD_VERSION"*
	packages="$packages $drbd_package"
fi

install-packages.sh $packages

# For convenience, DRBD can be provided as a module rather than a package
if [ -n "$(find /opt/packages -maxdepth 1 -name '*.ko' -print -quit)" ]; then
	mkdir -p /lib/modules/`uname -r`/updates
	cp -v /opt/packages/*.ko /lib/modules/`uname -r`/updates/

	# Make it possible to load drbd with modprobe.
	depmod -a
fi

# For convenience, binaries can be provided instead of packages
if [ -n "$(find /opt/packages/bin -maxdepth 1 -type f -print -quit)" ]; then
	cp -v /opt/packages/bin/* /usr/local/bin/
fi

# depmod makes DRBD package changes slow for compatibility tests. Disable it.
ln -sfT ../bin/true /usr/sbin/depmod

echo "Output of 'drbdadm --version':"
drbdadm --version || die "drbd-utils not installed"

modinfo drbd > /dev/null || die "DRBD not installed"

sed -i 's/usage-count yes/usage-count no/' /etc/drbd.d/global_common.conf

# Include the test resource configs from the standard path for convenience when
# developing tests.
echo 'include "/var/lib/drbd-test/*.res";' > /etc/drbd.d/drbd-test.res
'''

[steps.shell.env]
REPOSITORY_URL = "{{.RepositoryURL}}"
DRBD_REPOSITORY_URL = "{{.DrbdRepositoryURL}}"
RELEASE_REPOSITORY_URL = "{{.ReleaseRepositoryURL}}"
REPOSITORY_DISTRIBUTION = "{{.RepositoryDistribution}}"
REPOSITORY_PACKAGES = "{{.RepositoryPackages}}"
DRBD_VERSION = "{{.DrbdVersion}}"
DRBD_VERSION_OTHER = "{{.DrbdVersionOther}}"
