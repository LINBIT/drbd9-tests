#! /usr/bin/env python3
### vmshed: { "vms_all": [2, 3], "vms_ci": [2, 3], "drbd_version_min": "9.0" }
# Pass this script a list of host names to use as the test nodes.

import time
import signal
from python import drbdtest
from python.drbdtest import connections, log, peer_devices

def alarm_handler(signum, frame):
    raise Exception("timeout")

# main

resource = drbdtest.setup(min_nodes=2, max_nodes=5)
resource.disk_options = 'al-extents 67;'

diskless_n = resource.nodes[0]
diskful_nodes = resource.nodes.difference([diskless_n])

resource.add_disk('512M', diskful_nodes=diskful_nodes)
resource.up_wait()

log('* Make up-to-date data available.')
resource.skip_initial_sync();

log('* Beginning AL stress test')
diskless_n.primary()


for i in range(1, 5):
    try:
        old_sig = signal.signal(signal.SIGALRM, alarm_handler)
        signal.alarm(2) # seconds
        diskless_n.run_helper('stress-al.py', [resource.volumes[0].device(), '127'])
        signal.alarm(0) #disarm
        signal.signal(signal.SIGALRM, old_sig)
    except Exception as e:
        log('* Test failed, IO blocked! %s' % (e))
        signal.alarm(0) #disarm
        signal.signal(signal.SIGALRM, old_sig)
        resource.forbidden_patterns.difference_update([r'connection:BrokenPipe'])
        diskful_nodes.connections.to_node(diskless_n).disconnect(force=True)

        try:
            diskless_n.run(['true'])
            # This collects the exception for the IO error. On the primary/diskless
            # node the stress-al.py exits with an error code. We need to "collect"
            # that excetpion before using node.run() the next time
        except:
            pass

        diskless_n.secondary()
        resource.down()
        time.sleep(2)
        resource.rmmod()
        exit(10)

diskless_n.secondary()
diskful_nodes.connections.to_node(diskless_n).event(r'connection .* role:Secondary')
time.sleep(1)

log('* Shut down and clean up.')
resource.down()
resource.teardown()
