#! /usr/bin/env python3
### vmshed: { "vms_all": [3], "vms_ci": [3], "drbd_version_min": "9.1" }
#
# In a three node cluster with C diskless:
#
#      C
#     / \
#    A---B
#
# When B is primary and gets isolated from the other two nodes then the
# remaining partition of A & C know that B can not have quorum. When a
# bit later C disconnects from A, A can still be sure that B (and C)
# cannot re-gain quorum. Therefore A still has quorum.
#
# The implementation relies on remembering which nodes are "quorumless".
#
# DRBD-9.1.13 and 9.2.2 are the first releases that do that.
#
import time
from python import drbdtest
from python.drbdtest import connections, log, peer_devices
from subprocess import CalledProcessError

def ensure_quorum(isolated_n, other_n, diskless_n):
    connections(from_nodes=[other_n,diskless_n], to_node=isolated_n).event(r'connection .* connection:Unconnected')
    time.sleep(1.0) # Wait until the additional two-phase-commit had time to complete
    connections(other_n, diskless_n).disconnect()
    other_n.primary() # This promote proves that this partition has quorum;
    other_n.secondary()
    connections(other_n, diskless_n).connect()
    connections(other_n, diskless_n).event(r'connection .* connection:Connected')

def reconnect(isolated_n, other_n, diskless_n):
    connections(isolated_n, to_nodes=[other_n,diskless_n]).event(r'connection .* connection:Connected')
    connections(from_nodes=[other_n,diskless_n], to_node=isolated_n).event(r'connection .* connection:Connected')

def isolate_secondary(isolated_n, other_n, diskless_n):
    connections(isolated_n, to_nodes=[other_n,diskless_n]).block()
    ensure_quorum(isolated_n, other_n, diskless_n)
    connections(isolated_n, to_nodes=[other_n,diskless_n]).unblock()
    reconnect(isolated_n, other_n, diskless_n)

def disconnect_secondary(isolated_n, other_n, diskless_n):
    connections(isolated_n, diskless_n).disconnect()
    connections(isolated_n, other_n).disconnect()
    ensure_quorum(isolated_n, other_n, diskless_n)
    connections(isolated_n, to_nodes=[other_n,diskless_n]).connect()
    reconnect(isolated_n, other_n, diskless_n)

def isolate_primary(isolated_n, other_n, diskless_n):
    isolated_n.primary()
    isolate_secondary(isolated_n, other_n, diskless_n)
    isolated_n.secondary()

def verify_quorumless_propagates(isolated_n, other_n, diskless_n):
    connections(isolated_n, other_n).disconnect()
    connections(isolated_n, diskless_n).disconnect()
    connections(diskless_n, other_n).disconnect()
    other_n.primary() # This promote proves that this partition has quorum;
    other_n.secondary()
    connections(diskless_n, other_n).connect()
    connections(isolated_n, diskless_n).connect()
    connections(isolated_n, other_n).connect()
    connections(other_n, to_nodes=[diskless_n, isolated_n]).event(r'connection .* connection:Connected')
    connections(diskless_n, isolated_n).event(r'connection .* connection:Connected')


resource = drbdtest.setup_resource(nodes=3)
resource.resource_options = 'quorum majority;'
resource.net_options = 'ping-int 1;'
A, B, C = resource.nodes
resource.add_disk('1M', diskful_nodes=[A,B])
resource.up_wait()

log('* Make up-to-date data available.')
resource.skip_initial_sync()

log('* disconnect A and check remaining B has quorum')
disconnect_secondary(A, B, C)
log('* disconnect B and check remaining A has quorum')
disconnect_secondary(B, A, C)
log('* disconnect A, and B, verify C has quorum')
verify_quorumless_propagates(A, B, C)

resource.forbidden_patterns.remove(r'connection:BrokenPipe')
resource.forbidden_patterns.remove(r'connection:NetworkFailure')

log('* isolate primary A and check remaining B has quorum')
isolate_primary(A, B, C)
log('* isolate primary B and check remaining A has quorum')
isolate_primary(B, A, C)
log('* isolate secondary A and check remaining B has quorum')
isolate_secondary(A, B, C)
log('* isolate secondary B and check remaining A has quorum')
isolate_secondary(B, A, C)

resource.down()
resource.cluster.teardown()
