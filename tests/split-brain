#! /usr/bin/env python3
### vmshed: { "vms_all": [2], "vms_ci": [2], "drbd_version_min": "8.4" }

# Execute split brian and verify it is detected on both nodes.
#
# Up to (including) 9.0.25 it often detecteds split-brain only on one node

from python import drbdtest
from python.drbdtest import connections, log, peer_devices

RUNS=10
resource = drbdtest.setup(nodes=2)
resource.add_disk('10M')
resource.up_wait()
log('* Make up-to-date data available.')
resource.skip_initial_sync()

[first_n, second_n] = resource.nodes

resource.forbidden_patterns.difference_update([
    r'connection:NetworkFailure',
    r'connection:BrokenPipe'
])

conns = resource.connections
pd_from_second = peer_devices(second_n, first_n)[0]
pd_from_first = peer_devices(first_n, second_n)[0]

def test():
    conns.disconnect()

    with first_n.asPrimary():
        first_n.volumes[0].write(direct=1)
    with second_n.asPrimary():
        second_n.volumes[0].write(direct=1)

    conns.connect()
    ev = conns.event(r'connection .* connection:(StandAlone|Connecting)')
    if ['Connecting'] in ev:
        raise Exception('One of the nodes did not recognise the split brain!')

    connections(to_node=second_n).connect(options=['--discard-my-data'])
    connections(to_node=first_n).connect()
    pd_from_second.event(r'peer-device .* replication:SyncSource')
    pd_from_first.event(r'peer-device .* replication:SyncTarget')
    pd_from_second.event(r'peer-device .* replication:Established')
    pd_from_first.event(r'peer-device .* replication:Established')

#
for i in range(RUNS):
    test()

resource.down()
resource.teardown()
