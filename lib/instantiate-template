#! /bin/bash

HERE=${0%/*}
. $HERE/params.sh
. $HERE/client.sh

m4_define() {
    local name array key
    for name in "$@"; do
	set -- $(declare -p "$name" 2> /dev/null)
	case "$2" in
	-A)
	    # Asociative array
	    echo "m4_define_array(\`$name')"
	    eval "
		for key in \"\${!$name[@]}\"; do
		    echo \"$name(\\\`\$key', \\\`\${$name[\$key]}')\"
		done
	    "
	    ;;
	-a)
	    # Array
	    eval "set -- \"\${$name[@]}\""
	    [ $# -eq 0 ] || set -- "$(printf "\`%s', " "$@")"
	    echo "m4_define(\`$name', \`${1%??}')"
	    ;;
	--|-x)
	    # Normal variable (exported or not)
	    echo "m4_define(\`$name', \`${!name}')"
	    ;;
	*)
	    echo "$0: Internal error" >&2
	    exit 3
	    ;;
	esac
    done
}

instantiate_template() {
    local TMPL=$1
    shift
    local TMPL_DEFS="$(m4_define "$@")"

    do_debug m4 -P -I $HERE/m4 \
	-D TMPL_DEFS="$TMPL_DEFS" \
	$HERE/m4/preamble.m4 "$TMPL"
}

assign_addresses() {
    local node address

    for node in "${NODES[@]}"; do
	if [ -z "${params[$node:ADDRESS]}" ]; then
	    if address=$(gethostip -d "$node"); then
		params[$node:ADDRESS]="$address:$opt_port"
	    else
		params[$node:ADDRESS]="$node:$opt_port"
		status=1
	    fi
	fi
    done
}

declare -a node_ids_used
assign_node_ids() {
    local node id n

    for node in "${NODES[@]}"; do
	id=${params["$node:NODE_ID"]}
	if [ -n "$id" ]; then
	    node_ids_used[$id]=1
	fi
    done

    for node in "${NODES[@]}"; do
	if [ -z "${params["$node:NODE_ID"]}" ]; then
	    for ((n = 0; ; n++)); do
		if [ -z "${node_ids_used[$n]}" ]; then
		    node_ids_used[$n]=1
		    break
		fi
	    done
	    params["$node:NODE_ID"]=$n
	fi
    done
}

declare -A max_minor
assign_devices() {
    local node_name node name disk minor device device_node

    for node_name in "${!params[@]}"; do
	node=${node_name%%:*}
	name=${node_name#*:}
	case "$name" in
	DISK*)
	    device=${name/#DISK/DEVICE}
	    if [ -z "${params[$device]}" ]; then
		minor=$(( max_minor[$node]++ ))
		set_node_param "$device" "$node" "/dev/drbd$minor"
	    fi
	esac
    done
}

defined() {
    declare -p "$1" > /dev/null 2> /dev/null
}

usage() {
    [ $1 -eq 0 ] || exec >&2
    cat <<EOF
USAGE: ${0##*/} [options] {template}

OPTIONS:
  --resource=name
    Resource name to fill in (e.g., drbd0).  Required.

  --node=name
    Name of a test node.  This option can be used multiple times, and is
    requird at least once.

  --hostname=hostname
    Host name of the test node according to \`hostname'.  Required.

  --disk=device, --meta=device
    The lower-level device to use for data or metadata.  When
    no lower-level device is specified, the value /dev/scratch/\$resource
    is used.  When no metadata device is specified, internal metadata
    are assumed.  Both options can be used multiple times.  When used
    before --node, they define defaults which can be overridden for each
    host (after --node).

  --address=address
    The network address and port number of a node.  When
    omitted, the first network address of the host according
    to \`gethostip' is used.  Can only be used after --host.

  --node-id=number
    The node identifier of a node.  When omitted, node idenfiers
    are assigned automatically.  Can only be used after --host.

  --device=device
    The upper-level device to use (e.g., /dev/drbd0).  When omitted,
    /dev/drbd\$n devices are assigned automatically.

  --port=number
    The port number to use by default.

  --sh-cfg=filename
    Write the configuration into specified file in shell-parseable form.

  --debug
    Print the M4 command line used to produce the configuration file.
EOF
    exit $1
}

options=`getopt -o h --long resource:,node:,hostname:,device:,disk:,meta:,node-id:,address:,drbd-major-version:,debug,port:,sh-cfg:,help -- "$@"` || usage 1
eval set -- "$options"

opt_debug=
declare DRBD_MAJOR_VERSION= RESOURCE= opt_sh_cfg=
declare -A NODE_ID ADDRESS
opt_port=7789

while :; do
    case "$1" in
    -h|--help)
	usage 0
	;;
    --debug)
	opt_debug=1
	;;
    --port)
	opt_port=$2
	shift
	;;
    --drbd-major-version)
	DRBD_MAJOR_VERSION=$2
	shift
	;;
    --resource)
	RESOURCE=$2
	shift
	;;
    --node)
	new_node "$2"
	shift
	;;
    --hostname)
	if [ "$node" = _ ]; then
	    echo "Option $1 is not allowed before the first --node option" >&2
	    exit 1
	fi
	set_node_param "$1" "$node" "$2"
	shift
	;;
    --device|--disk|--meta)
	add_node_param "$1" "$node" "$2"
	shift
	;;
    --node-id|--address)
	if [ "$node" = _ ]; then
	    echo "Option $1 is not allowed before the first --node option" >&2
	    exit 1
	fi
	set_node_param "$1" "$node" "$2"
	shift
	;;
    --sh-cfg)
	opt_sh_cfg=$2
	shift
	;;
    --)
	shift
	break
	;;
    esac
    shift
done

[ -n "$RESOURCE" -a ${#NODES[@]} -ge 1 -a $# -ge 1 ] || usage 1

unset_all_node_params

assign_addresses
assign_devices
assign_node_ids

unset HOSTNAME

# Convert params[node:NAME]=value into NAME[node]=value representation
for node_name in "${!params[@]}"; do
    node=${node_name%%:*}
    name=${node_name#*:}
    eval "
	declare -A $name
	$name[\$node]=\"\${params[\"\$node:\$name\"]}\"
    "
done

VOLUMES=(${!DISK*})
VOLUMES=("${VOLUMES[@]/#DISK}")
for template in "$@"; do
    instantiate_template "$template" RESOURCE NODES VOLUMES NODE_ID ADDRESS DRBD_MAJOR_VERSION HOSTNAME ${!DEVICE*} ${!DISK*} ${!META*}
done

if [ -n "$opt_sh_cfg" ]; then
    {   echo "cfg[\"resources\"]=\"$RESOURCE\""
	echo "cfg[\"$RESOURCE::nodes\"]=\"${NODES[*]}\""

	for node in "${NODES[@]}"; do
	    echo "cfg[\"$RESOURCE:$node::node-id\"]=\"${params["$node:NODE_ID"]}\""
	    echo "cfg[\"$RESOURCE:$node::hostname\"]=\"${params[$node:HOSTNAME]}\""
	    echo "cfg[\"$RESOURCE:$node::volumes\"]=\"${VOLUMES[@]}\""
	    declare -a connections=()
	    for volume in "${VOLUMES[@]}"; do
		echo "cfg[\"$RESOURCE:$node:$volume::device\"]=\"${params[$node:DEVICE$volume]}\""
		echo "cfg[\"$RESOURCE:$node:$volume::disk\"]=\"${params[$node:DISK$volume]}\""
		echo "cfg[\"$RESOURCE:$node:$volume::meta\"]=\"${params[$node:META$volume]}\""
	    done
	    for node2 in "${NODES[@]}"; do
		[ "$node" != "$node2" ] || continue
		connections[${#connections[@]}]=$node2
	    done
	    echo "cfg[\"$RESOURCE:$node::connections\"]=\"${connections[*]}\""
	    for node2 in "${NODES[@]}"; do
		[ "$node" != "$node2" ] || continue
		echo "cfg[\"$RESOURCE:$node:$node2::name\"]=\"${params[$node2:HOSTNAME]}\""
		echo "cfg[\"$RESOURCE:$node:$node2::local\"]=\"${params[$node:ADDRESS]}\""
		echo "cfg[\"$RESOURCE:$node:$node2::peer\"]=\"${params[$node2:ADDRESS]}\""
	    done
	    echo
	done
    } > "$opt_sh_cfg"
fi

exit $status
