#! /usr/bin/env python

# Pass this script a list of host names to use as the test nodes.

from python import drbdtest
from python.drbdtest import verbose
from subprocess import CalledProcessError

resource = drbdtest.setup(min_nodes=3, max_nodes=5)

diskful_nodes = resource.nodes[0:2]
resource.add_disk('10M', diskful_nodes=diskful_nodes)

resource.up_wait()

# NOTE: drbdadm primary --force currently fails for new data on diskless nodes:
# drbd doesn't know which node to turn UpToDate.  We could implement a "drbdadm
# uptodate" or similar command that turns a node UpToDate without making in
# primary.  Until then, we have to make one of the diskful nodes primary and then
# secondary again to make it UpToDate.

verbose('* Make up-to-date data available.')
resource.skip_initial_sync();
# FIXME: change _initial_resync so that it works for a subset of nodes, or so
# that it works in the diskless node case, instead of the above?

verbose('* Writing from diskless node.')
diskless_node.primary()
diskless_node.fio(section='write')
diskless_node.secondary()

verbose('* Verifying on diskful node.')
diskful_nodes[0].fio(section='verify')

verbose('* Disconnecting nodes.')
diskless_node.primary()
resource.connections. \
    from_node(diskless_node). \
    to_nodes(diskful_nodes[:-1]). \
	disconnect()

try:
    diskless_node.disconnect(diskful_nodes[-1])
except CalledProcessError:
    pass
else:
    raise CalledProcessError("'%s'.disconnect('%s') unexpectedly succeeded" %
	(diskless_node, diskful_nodes[-1]))

try:
    diskful_nodes[-1].disconnect(diskless_node)
except CalledProcessError:
    pass
else:
    raise CalledProcessError("'%s'.disconnect('%s') unexpectedly succeeded" %
	(diskful_nodes[-1], diskless_node))

diskless_node.secondary()

# FIXME: If we don't wait for all nodes to realize that diskless_node has
# become secondary, drbd will fail with the following error:
#   State change failed: (-2) Need access to UpToDate data
# Even this wait often isn't enough to prevent this error, though -- this needs
# to be debugged.
resource.connections. \
    to_node(diskless_node). \
	event(r'connection .* role:Secondary')

# FIXME: Simulate network outage

verbose('* Shut down and clean up.')
resource.down()
resource.rmmod()
