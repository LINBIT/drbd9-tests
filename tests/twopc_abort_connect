#! /usr/bin/env python3
#
# This test examines how DRBD behaves when the loss of a connection leads
# to a two-phase-commit can not complete. It does that by blocking the
# P_TWO_PC yes and then completely blocking the connection.
#
# Up to (including) 9.0.24 this was broken in DRBD.

import re
import time
from operator import attrgetter
from python import drbdtest
from python.drbdtest import log

def do_test(resource):
    [node_a, node_b, node_c] = list(resource.nodes)

    assert node_a.id < node_b.id and node_b.id < node_c.id

    conn_a_b = resource.connections.from_node(node_a).to_node(node_b)[0]
    conn_c_b = resource.connections.from_node(node_c).to_node(node_b)[0]
    conn_a_b.disconnect()
    conn_c_b.disconnect()

    node_a.block_packet_type(drbdtest.P_TWOPC_YES, from_node=node_b, volume=0xffff)
    conn_a_b.connect()
    time.sleep(2)
    conn_a_b.block()
    node_a.unblock_packet_type(drbdtest.P_TWOPC_YES, from_node=node_b, volume=0xffff)
    conn_c_b.connect()
    # Timeout less than the twopc-timeout of 30s because we should not need to
    # wait for any two-phase commit to time out in this situation
    conn_c_b.event(r'connection:Connected', timeout=15)

resource = drbdtest.setup(min_nodes=3, max_nodes=3)
resource.net_options = 'ping-int 1;'
resource.resource_options = 'twopc-timeout 300;'
resource.add_disk('10M')

resource.up_wait()

log('* Make up-to-date data available.')
resource.skip_initial_sync()
resource.forbidden_patterns.difference_update([
    r'connection:NetworkFailure',
    r'connection:BrokenPipe',
    r'connection:Timeout',
])
[node_a, node_b, node_c] = list(resource.nodes)
conn_a_c = resource.connections.from_node(node_a).to_node(node_c)[0]

do_test(resource)
conn_a_c.disconnect()
do_test(resource)
conn_a_c.connect()
conn_a_c.event(r'connection:Connected')

resource.down()
resource.teardown()
