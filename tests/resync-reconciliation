#! /usr/bin/env python3
#
# This test configures a 3 node system, one primary. It writes a few blocks
# on the primary, and tricks the secondaries to be a different positions
# in the receive stream.
# Then it wants to witness the reconciliation resync between the secondaries
# after the primary disappeared.

import time
import random
import re
from python import drbdtest
from python.drbdtest import log
from subprocess import CalledProcessError

NOT = 0
EARLY = 1
LATE = 2
DURING_RESYNC = 3

data_amount = 128

random.seed()

resource = drbdtest.setup(min_nodes=3, max_nodes=3)
resource.add_disk('10M')
resource.resource_options = 'quorum majority; on-no-quorum io-error;'
resource.net_options = 'ping-int 2;'

resource.up_wait()

log('* Make up-to-date data available.')
resource.skip_initial_sync()

[primary_n, secondary_slow, secondary_quick] = random.sample(list(resource.nodes), 3)
conn_slow = drbdtest.Connections()
conn_slow.bidir_add(primary_n, secondary_slow)
conn_quick = drbdtest.Connections()
conn_quick.bidir_add(primary_n, secondary_quick)

forward_c = resource.connections.from_node(secondary_quick).to_node(secondary_slow)[0]
backward_c = resource.connections.from_node(secondary_slow).to_node(secondary_quick)[0]
forward_pd = drbdtest.PeerDevice(forward_c, resource.volumes[0])
backward_pd = drbdtest.PeerDevice(backward_c, resource.volumes[0])

slow_primary_c = resource.connections.from_node(secondary_slow).to_node(primary_n)[0]
slow_primary_pd = drbdtest.PeerDevice(slow_primary_c, resource.volumes[0])

resource.forbidden_patterns.difference_update([
    r'connection:NetworkFailure',
    r'connection:BrokenPipe',
    r'connection:Timeout',
])

def sectors_received(node, res_name, peer_node_name):
    status_str = node.run(["drbdsetup", "status", res_name, "--statistics"], return_stdout=True)
    m = re.search(r'%s(?:\.\w+)? role:.*?\n\s+peer-disk:.*\n\s+received:([0-9]+) sent:' % (peer_node_name), status_str)
    if m:
        received = int(m.group(1))
        return received
    else:
        raise Exception("regex not matching. %s" % (status_str))

def do_test(with_promote):
    log('* Running variant %d' % (with_promote))
    primary_n.primary()
    dev_name = primary_n.volumes[0].device()

    log('* Blocked network connetion to one peer & writing')
    conn_slow.block()

    primary_n.run(["dd", "if=/dev/urandom", "of=/tmp/data", "bs=%dk" % (data_amount), "count=1"])
    md5sum_p = primary_n.run(['md5sum', '/tmp/data'], return_stdout=True)
    # The dd command itself will block since one of the secondaries is not reachable,
    # and therefore DRBD will not complete the write before the timeout expires.
    # Using setsid and bash background execution to ensure that the teststuite continues
    # and does not wait for the dd to terminate.
    primary_n.run(["setsid", "bash", "-c", "dd if=/tmp/data of=%s bs=%dk count=1 < /dev/null &> /dev/null &" % (dev_name, data_amount)])

    # Wait until the "quick" secondary got at least one of those writes
    for i in range(0, 40):
        time.sleep(0.05)
        slow_received = sectors_received(secondary_slow, resource.name, primary_n.name);
        quick_received = sectors_received(secondary_quick, resource.name, primary_n.name);

        if quick_received - slow_received >= data_amount:
            log('* The quick secondary is at least %d KiB writes ahead' %
                       (quick_received - slow_received))
            break
    else:
        raise Exception('No recieve progress!')

    #resource.forbidden_patterns.difference_update([r'connection:NetworkFailure'])
    conn_quick.block()
    log('* Blocked network connetion to both secondaries')

    if with_promote == EARLY:
        secondary_slow.primary(wait=False)

    conn_to_primary = resource.connections.to_node(primary_n)
    failure_state = conn_to_primary.event(r'connection .* connection:(NetworkFailure|Timeout)')
    conn_to_primary.event(r'connection .* connection:Unconnected')

    conn_to_secondaries = resource.connections.from_node(primary_n)
    conn_to_secondaries.event(r'connection .* connection:Unconnected')
    #resource.forbidden_patterns.update([r'connection:NetworkFailure'])

    if with_promote == LATE:
        secondary_slow.primary(wait=False)

    evf = forward_pd.event(r'peer-device .* replication:SyncSource .* out-of-sync:(\d+)')
    evb = backward_pd.event(r'peer-device .* replication:SyncTarget .* out-of-sync:(\d+)')
    source_amount = int(evf[0][0])
    target_amount = int(evb[0][0])
    if source_amount != data_amount and target_amount != data_amount:
        raise Exception('Neither source(%d) nor destination(%d) see right resync amount(d)'
                        % (source_amount, target_amount, data_amount))

    if with_promote == DURING_RESYNC:
        secondary_slow.primary(wait=False)

    forward_pd.event(r'peer-device .* replication:Established')
    backward_pd.event(r'peer-device .* replication:Established')

    if with_promote != NOT:
        secondary_slow.secondary(wait=False)

    secondary_slow.run(["dd", "if=%s" % (dev_name), "of=/tmp/data", "bs=%dk" % (data_amount), "count=1"])
    md5sum_ss = secondary_slow.run(['md5sum', '/tmp/data'], return_stdout=True)
    secondary_slow.run(["rm", "/tmp/data"])

    secondary_quick.run(["dd", "if=%s" % (dev_name), "of=/tmp/data", "bs=%dk" % (data_amount), "count=1"])
    md5sum_sq = secondary_quick.run(['md5sum', '/tmp/data'], return_stdout=True)
    secondary_quick.run(["rm", "/tmp/data"])

    if md5sum_p != md5sum_ss or md5sum_p != md5sum_sq:
        raise Exception('Md5 sums differ! %s %s %s' % (md5sum_p, md5sum_sq, md5sum_ss))

    primary_n.run(["rm", "/tmp/data"])
    primary_n.secondary()
    conn_slow.unblock()
    conn_quick.unblock()
    conn_slow.event(r'connection:Connected')
    conn_quick.event(r'connection:Connected')

    if with_promote == EARLY and failure_state[0][0] == 'NetworkFailure':
        # Expect resync from secondary_slow to primary
        slow_primary_pd.event(r'peer-device .* replication:SyncSource')
        slow_primary_pd.event(r'peer-device .* replication:Established')


do_test(with_promote=NOT)
do_test(with_promote=EARLY)
do_test(with_promote=LATE)
do_test(with_promote=DURING_RESYNC)

resource.down()
resource.rmmod()
