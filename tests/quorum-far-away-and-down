#! /usr/bin/env python3
### vmshed: { "vms_all": [3], "vms_ci": [3], "drbd_version_min": "9.1" }
#
# Tests that it outdates far-away nodes in all circumstances. That is in
#     B
#    / \	B is diskless
#   /   \	A and C have a disk
#  A --- C
#		The possibilities are:
#  1) A promotes first, then A - C get disconnected gracefully
#  2) A promotes first, then A - C get disconnected ungraceful
#  3) A - C get disconnected first, then A promotes
#
# Tests that outdated peers still count as outdated after they get unconfigured-
# That is in
#     B
#    / \	B is diskless
#   /   \	A and C have a disk
#  A -X- C      X ... not connected
#
#  A is primary, C is outdated. A does a del-peer C. After demote, it should
#  still be able to promote.

from python import drbdtest
from python.drbdtest import connections, log, peer_devices

resource = drbdtest.setup_resource(nodes=3)
A, B, C = resource.nodes
resource.add_disk('10M', diskful_nodes=[A, C])
resource.resource_options = 'quorum majority;'

resource.up_wait()
resource.skip_initial_sync()

#  1) A promotes first, then A - C get disconnected gracefully
A.primary()
connections(A, C).disconnect(wait=False)
peer_devices(A, C).event(r'peer-device .* peer-disk:Outdated')
C.volumes.event(r'device .* disk:Outdated')

A.secondary()
A.primary()
connections(B, A).event(r'connection .* role:Primary')

connections(A, C).connect()
C.volumes.event(r'device .* disk:UpToDate')

#  2) A promotes first, then A - C get disconnected ungreaceful
resource.forbidden_patterns.remove(r'connection:BrokenPipe')
connections(C, A).disconnect(wait=False, force=True)
peer_devices(A, C).event(r'peer-device .* peer-disk:Outdated')
C.volumes.event(r'device .* disk:Outdated')

A.secondary()
A.primary()
connections(B, A).event(r'connection .* role:Primary')

connections(C, A).connect()
C.volumes.event(r'device .* disk:UpToDate')
resource.forbidden_patterns.add(r'connection:BrokenPipe')

#  3) A - C get disconnected first, then A promotes
A.secondary()
connections(A, C).disconnect()
A.primary()
peer_devices(A, C).event(r'peer-device .* peer-disk:Outdated')
C.volumes.event(r'device .* disk:Outdated')

A.secondary()
A.primary()
connections(B, A).event(r'connection .* role:Primary')

#  A is primary, C is outdated. A does a del-peer C. After demote it should
#  still be able to promote.
A.secondary()
A.drbdadm(['del-peer', '%s:%s' % (resource.name, C.name)])
A.primary()

resource.cluster.teardown()
