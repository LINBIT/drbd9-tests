#! /usr/bin/env python3
### vmshed: { "vms_all": [2, 5], "vms_ci": [2, 5], "drbd_version_min": "8.4" }

# Pass this script a list of host names to use as the test nodes.


from python import drbdtest
from python.drbdtest import connections, log, peer_devices
from subprocess import CalledProcessError

resource = drbdtest.setup(min_nodes=2, max_nodes=5)

resource.add_disk('4M')

resource.up_wait()
resource.skip_initial_sync()


# switch the primary role around
# could be done via autopromote, too.

for i in range(5):
    node = resource.nodes[i % len(resource.nodes)]
    others = resource.nodes.difference( [node] )
    log('Loop #%d: node %s' % (i, node))
    node.primary()
    node.fio(drbdtest.fio_write_args)
    node.secondary()
    others.event(r'connection .* role:Primary')
    others.event(r'connection .* role:Secondary')

# If that did work, run again _without_ event checking ... this way the transitions happen faster.
for i in range(5):
    node = resource.nodes[i % len(resource.nodes)]
    log('Unchecked loop #%d: node %s' % (i, node))
    node.primary()
    node.secondary()

if resource.nodes.min_drbd_version_tuple() >= (9, 0, 0):
    # and once more, with implicit transitions via open()
    for i in range(5):
        node = resource.nodes[i % len(resource.nodes)]
        log('open loop #%d: node %s' % (i, node))
        node.fio(drbdtest.fio_write_args)


first = resource.nodes[0]
others = resource.nodes.difference( [first] )
connections_first_others = resource.connections.from_node(first)
connections_others_first = resource.connections.to_node(first)
# Ensure all are still running fine, by causing an event that can be waited for
connections_first_others.disconnect()
connections_others_first.event(r'connection .* connection:Connecting')
first.primary()
connections_first_others.connect()
connections_others_first.event(r'connection .* role:Primary')
first.secondary()

log('* Shut down and clean up.')

resource.down()
resource.teardown()
