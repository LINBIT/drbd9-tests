#! /usr/bin/env python3
### vmshed: { "vms_all": [3], "vms_ci": [3], "drbd_version_min": "9.0" }

# This test exercises resync between to diskfull nodes with a
# diskless primary present

from python import drbdtest
from python.drbdtest import connections, log, peer_devices

resource = drbdtest.setup(nodes=3)
resource.disk_options = 'c-max-rate 500k;'
diskful_nodes = resource.nodes[1:]
resource.add_disk('10M', diskful_nodes=diskful_nodes)

resource.up_wait()
log('* Make up-to-date data available.')
resource.skip_initial_sync()

diskless_n = resource.nodes.diskless[0]
flapping_n = diskful_nodes[0]
stable_n = diskful_nodes[1]
diskless_v = diskless_n.volumes[0]
dless_to_flapping_pd = diskless_v.peer_devices.to_node(flapping_n)
resync_target_pd = flapping_n.volumes[0].peer_devices.to_node(stable_n)
resync_source_pd = stable_n.volumes[0].peer_devices.to_node(flapping_n)
from_flapping_c = resource.connections.from_node(flapping_n)
flapping_to_dless_c = from_flapping_c.to_node(diskless_n)
flapping_to_stable_c = from_flapping_c.to_node(stable_n)

def prelude(do_resync, text):
    log(text)
    diskless_n.primary()
    diskless_v.write(direct=1)

    from_flapping_c.disconnect()
    dless_to_flapping_pd.event(r'peer-device .* replication:Off')
    if do_resync:
        diskless_v.write(size='1M', bs='1M', offset='1M', direct=1)

def postlude():
    dless_to_flapping_pd.event(r'peer-device .* peer-disk:UpToDate')
    diskless_n.secondary()

def test1(do_resync):
    prelude(do_resync, '* connect to diskless first ')
    flapping_to_dless_c.connect()
    dless_to_flapping_pd.event(r'peer-device .* peer-disk:Outdated')
    flapping_to_stable_c.connect()
    if do_resync:
        resync_target_pd.event(r'peer-device .* replication:SyncTarget')
        resync_source_pd.event(r'peer-device .* replication:SyncSource')
    resync_target_pd.event(r'peer-device .* replication:Established')
    resync_source_pd.event(r'peer-device .* replication:Established')
    postlude()

def test2(do_resync):
    if do_resync:
        prelude(do_resync, '* connect to other diskfull first, connect to dless during resync')
        flapping_to_stable_c.connect()
        resync_target_pd.event(r'peer-device .* replication:SyncTarget')
        resync_source_pd.event(r'peer-device .* replication:SyncSource')
        flapping_to_dless_c.connect()
        dless_to_flapping_pd.event(r'peer-device .* peer-disk:Inconsistent')
        resync_target_pd.event(r'peer-device .* replication:Established')
        resync_source_pd.event(r'peer-device .* replication:Established')
        postlude()

def test3(do_resync):
    prelude(do_resync, '* connect to other diskfull first, connect to dless after resync')
    flapping_to_stable_c.connect()
    if do_resync:
        resync_target_pd.event(r'peer-device .* replication:SyncTarget')
        resync_source_pd.event(r'peer-device .* replication:SyncSource')
    resync_target_pd.event(r'peer-device .* replication:Established')
    resync_source_pd.event(r'peer-device .* replication:Established')
    flapping_to_dless_c.connect()
    postlude()

def test(do_resync):
    test1(do_resync)
    test2(do_resync)
    test3(do_resync)


test(do_resync=True)
test(do_resync=False)

log('* Shut down and clean up.')
resource.teardown()
