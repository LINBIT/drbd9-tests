#! /usr/bin/env python3
### vmshed: { "vms_all": [2], "vms_ci": [2], "drbd_version_min": "8.4" }
#
# Promote while we hole the uuid_sem . There was a locking bug
# in the code that caused this to deadlock. Keep such a test
# in the testsuite so that we see it quickly when we re-introduce
# it.

from python import drbdtest
from python.drbdtest import connections, log, peer_devices
import time
#import os

def my_log(str):
    log(str)
    for node in resource.nodes:
        node.run(["echo", str])

resource = drbdtest.setup(nodes=2)
resource.add_disk('10M')
resource.up_wait()

A = resource.nodes[0]
B = resource.nodes[1]
a_b = resource.connections.from_node(A)
b_a = resource.connections.from_node(B)
pds = drbdtest.PeerDevices.from_connections(resource.connections)
dev_name = A.volumes[0].device()

my_log('* Make up-to-date data available.')
resource.skip_initial_sync()

my_log('* Start by disconnect.')
a_b.disconnect()
b_a.event(r'connection:Connecting')

A.block_packet_type(drbdtest.P_SIZES, from_node=B)
A.primary()
a_b.connect()
time.sleep(0.8)
my_log('* Creating new UUID while uuid_sem is locked.')
dd_pid = A.run([
    "setsid", "bash", "-c",
    "dd if=/dev/zero of=%s bs=%dk count=1 oflag=direct < /dev/null &> /dev/null & echo $!" % (dev_name, 4)],
    return_stdout=True)
A.unblock_packet_type(drbdtest.P_SIZES, from_node=B)

pds.event(r'peer-device .* replication:Established')

log('* Wait for dd process to finish')
A.run(["tail", "--pid={}".format(dd_pid), "-f", "/dev/null"])

log('* Shut down and clean up.')

resource.down()
resource.teardown()
