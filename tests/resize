#! /usr/bin/env python3
### vmshed: { "vms_all": [2, 5], "vms_ci": [2], "drbd_version_min": "9.0" }

# Pass this script a list of host names to use as the test nodes.
# From 3 nodes on, one will only be weakly connected;
# from 4 nodes on, one will be diskless.

from python import drbdtest
from python.drbdtest import connections, log, peer_devices
from subprocess import CalledProcessError
import time

# In MB; should be a multiple of the PE size, so that there's _really_ a size change ;)
size = 8
step = 8

resource = drbdtest.setup_resource(min_nodes=2, max_nodes=5)
max_peers = len(resource.nodes)-1

def verify_size(size_mb = 0, nodes=resource.nodes, adjust_for_internal_meta_data=False):
    common_size = 0
    for n in nodes:
        size_bytes = int(n.run(['blockdev', '--getsize64',
                                '/dev/drbd%d' % (n.disks[0].minor)],
                               return_stdout=True))
        if size_mb:
            expected_bytes = size_mb * 2**20
            if adjust_for_internal_meta_data:
                bits = int((expected_bytes + 4095)/4096)
                words = int((bits + 63)/64)*64
                pages = int((bits/8 * max_peers + 4095)/4096)
                # bitmap pages + activity log + "super block"
                metadata_bytes = 1024 * (4 + 32 + 4 * pages)
                expected_bytes = expected_bytes - metadata_bytes
            if expected_bytes != size_bytes:
                raise RuntimeError("Expected %d found %d on %s" %
                                   (expected_bytes, size_bytes, n.name))
        if common_size == 0:
            common_size = size_bytes
        else:
            if size_bytes != common_size:
                raise RuntimeError("Expected %d found %d on %s" %
                                   (common_size, size_bytes, n.name))
        log("found size to be\n%12d Bytes\n%12d kB\n%12d MiB" %
                ( common_size, int(common_size/1024), int(common_size / 2**20)));

# Node sets
client_nodes = []
weak_node = None
nr_nodes = len(resource.nodes)

# Settle time in seconds (should be 0)
settle_time = 0.1

if nr_nodes > 3:
    diskful_nodes = resource.nodes[0:nr_nodes - 1]
else:
    diskful_nodes = resource.nodes

# don't have the diskless one weakly connected, too!
if len(resource.nodes) > 2:
    weak_node = diskful_nodes[-1]

# take a strong one
first_node = diskful_nodes[0]
second_node = diskful_nodes[1]

# Initialization
resource.add_disk('%dM' % size, diskful_nodes=diskful_nodes, max_size='%dM' % (size + step * len(diskful_nodes)))
resource.up_wait()

log('* Make up-to-date data available.')
resource.skip_initial_sync();

# make one node "weakly" connected
#if weak_node:
#    for n in resource.nodes:
#        if n != weak_node and n != first_node:
#            weak_node.disconnect(n)

#first_node.fio(drbdtest.fio_write_args)


## TODOs: add some test for --assume-peer-has-space

log('\n* Resize on each diskfull node once. Testing --size and --assume-clean')
for n in diskful_nodes:
    # new values
    size += step
    size_str = "%dM" % size

    log('* Node %s wants to use %dMB;' % (n, size - 1))

    # Only if same VG everywhere
    diskful_nodes.volumes.resize(size_str)

    n.drbdadm(['resize', '--assume-clean',
                     '--size=%dM' % (size - 1), resource.name])

    time.sleep(settle_time)
    verify_size(size_mb = size-1)


# This is also a test of two-phase-commit serializing concurrent transactions,
# since starting the transaction al all nodes concurrently.
log('\n* Get rid of the user supplied size')
diskful_nodes.drbdadm(['resize', '--assume-clean', resource.name])
verify_size(size_mb = size, adjust_for_internal_meta_data = True)

log('\n* Resize on each diskfull node once. Testing --assume-clean')
for n in diskful_nodes:
    size += step
    size_str = "%dM" % size

    log('* Node %s wants to use %dMB;' % (n, size))

    diskful_nodes.volumes.resize(size_str)

    n.drbdadm(['resize', '--assume-clean', resource.name])

    time.sleep(settle_time)
    verify_size()


log('\n* Check resync after resize.')
size += step
size_str = "%dM" % size
diskful_nodes.volumes.resize(size_str)
first_node.drbdadm(['resize', resource.name])

rstn = diskful_nodes.difference([first_node])
pds = peer_devices(first_node, to_nodes=rstn)
pds.event(r'peer-device .* replication:SyncSource')
pds.event(r'peer-device .* replication:Established')
rstn.volumes.event(r'device .* disk:Inconsistent')
rstn.volumes.event(r'device .* disk:UpToDate')
verify_size(size_mb = size, adjust_for_internal_meta_data = True)

if nr_nodes >= 5:
    log('\n* Forming a sigma-shaped cluster')
    #
    # This tests what the two-phase-commit logic does at node 3
    # where the prepare (and commit) arrives two times.
    #

    # sigma:
    #    1
    #   / \
    #  0   3--4
    #   \ /
    #    2
    sigma = drbdtest.Connections()
    sigma.bidir_add(resource.nodes[0], resource.nodes[1])
    sigma.bidir_add(resource.nodes[0], resource.nodes[2])
    sigma.bidir_add(resource.nodes[1], resource.nodes[3])
    sigma.bidir_add(resource.nodes[2], resource.nodes[3])
    sigma.bidir_add(resource.nodes[3], resource.nodes[4])

    resource.connections.difference(sigma).disconnect()

    size += step
    size_str = "%dM" % size

    log('* Resizing disks to %dMB;' % (size))

    diskful_nodes.volumes.resize(size_str)

    first_node.drbdadm(['resize', '--assume-clean', resource.name])
    time.sleep(settle_time)
    verify_size()

previous_effective_size = size
log('\n* Resize while disconnected: size must stay at %dMB' % previous_effective_size)
connections(first_node, resource.nodes[2:]).disconnect()
size += step
size_str = "%dM" % size
diskful_nodes[1:].volumes.resize(size_str)
first_node.drbdadm(['resize', '--assume-clean', resource.name])
second_node.drbdadm(['resize', '--assume-clean', resource.name])
time.sleep(settle_time)
# -1 to account for meta data
# effective drbd size in MB is truncated (rounded down)
verify_size(size_mb = previous_effective_size, adjust_for_internal_meta_data = True)

log('\n* Resize while disconnect, --assume-peer-has-space should allow to grow to %dMB' % size)
second_node.drbdadm(['resize', '--assume-clean', '--assume-peer-has-space', resource.name])
time.sleep(settle_time)
verify_size(size_mb = size, nodes = resource.nodes[1:], adjust_for_internal_meta_data = True)

log('\n* Connect of a too small backend should be rejected')
connections(first_node, second_node).connect()
connections(first_node, second_node, bidir = True).event(r'connection .* connection:StandAlone')

log('\n* Resize after a too small peer was rejected should not have any effect')
second_node.drbdadm(['resize', resource.name])
time.sleep(settle_time)
verify_size(size_mb = size, nodes = resource.nodes[1:], adjust_for_internal_meta_data = True)

previous_effective_size_first_node = previous_effective_size
previous_effective_size = size
size += step
size_str = "%dM" % size
diskful_nodes.volumes.resize(size_str)
log('\n* Resize on isolated node should not have an effect')
first_node.drbdadm(['resize', resource.name])
time.sleep(settle_time)
verify_size(size_mb = previous_effective_size_first_node, nodes = [first_node], adjust_for_internal_meta_data = True)

log('\n* Connect should notice backend size change and auto-grow to %dMB' % size)

connections(first_node, second_node, bidir = True).connect()
connections(first_node, second_node, bidir = True).event(r'connection .* connection:Connected')
time.sleep(settle_time)
verify_size(size_mb = size, adjust_for_internal_meta_data=True)

if len(resource.nodes.diskless) >= 1:
    log('\n* Verify consistency between old resize code an 2pc code')
    # Resize using 2pc code. The connect of the diskless works only if
    # some caching members (like peer_device->max_size) in DRBD where
    # updated correctly by the 2pc code.
    resource.down()

    two_nodes = diskful_nodes[0:2]
    two_nodes.up()

    pds = peer_devices(two_nodes[0], two_nodes[1], bidir=True)
    pds.event(r'peer-device .* peer-disk:UpToDate')

    # this is part of up_wait, so add it here explicitly:
    resource.forbidden_patterns.update([
        r'connection:BrokenPipe',
        r'connection:NetworkFailure'])

    size += step
    size_str = "%dM" % size
    two_nodes.volumes.resize(size_str)

    n = diskful_nodes[0]
    n.drbdadm(['resize', '--assume-clean', resource.name])

    diskless_node = resource.nodes.diskless[0]
    diskless_node.up()

    pds = peer_devices(diskless_node, to_nodes=two_nodes)
    pds.event(r'peer-device .* replication:Established')
    # Unfortunately the BrokenPipe comes in after the Established, so do something in order to
    # see the BrokenPipe...
    diskless_node.primary()
    diskless_node.secondary()
    time.sleep(settle_time)
    verify_size(size_mb = size, nodes = two_nodes + [diskless_node], adjust_for_internal_meta_data=True)

    log('\n* Shut down and clean up.')
    diskless_node.down()
    two_nodes.down()
else:
    log('\n* Shut down and clean up.')
    resource.down()

resource.cluster.teardown()
