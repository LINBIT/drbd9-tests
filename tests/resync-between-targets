#! /usr/bin/env python3

# This test creates a "due to diskstates" resync between two nodes that
# have an outdates version of the data. After that both start a resync
# with the owner of the new data, i.e. both become resync target to
# that third node.
# When the later resync (bringing the real data) finishes it sends
# resync finished notifications to both sync sources. Up to recently
# it was ignored on the node that became sync-source with an
# inconsistent disk.

# this bug was fixed in drbd-9.0.23

from python import drbdtest
from python.drbdtest import log

resource = drbdtest.setup(nodes=3)
resource.disk_options = 'c-max-rate 500k;'
resource.add_disk('10M')

resource.up_wait()
log('* Make up-to-date data available.')
resource.skip_initial_sync()

ahead_n = resource.nodes[0]
target_n = resource.nodes[1]
source_n = resource.nodes[2]
source_target_c = resource.connections.from_node(source_n).to_node(target_n)
ahead_target_c = resource.connections.from_node(ahead_n).to_node(target_n)
ahead_source_c = resource.connections.from_node(ahead_n).to_node(source_n)
source_target_pd = source_n.volumes[0].peer_devices.to_node(target_n)
ahead_c = resource.connections.from_node(ahead_n)
ahead_v = ahead_n.volumes[0]
target_v = target_n.volumes[0]
source_v = source_n.volumes[0]

log('* Preparing.')
source_target_c.disconnect()
ahead_c.disconnect()
ahead_n.primary()
ahead_v.write(bs=1024*1024, count=1, flags=['oflag=direct'])
ahead_n.down()
source_n.down()
target_n.down()
ahead_n.up()
ahead_n.primary()
ahead_c.disconnect()
source_n.up()
source_target_c.disconnect()
target_n.up()

log('* Start resync from the ahead node.')
ahead_target_c.connect()
target_v.event(r'device .* disk:Inconsistent')

log('* Let the two behinds connect')
source_target_c.connect()
source_target_pd.event(r'peer-device .* replication:PausedSyncS')

log('* Start resync from ahead to source node.')
ahead_source_c.connect()

log('* Verify.')
source_target_pd.event(r'peer-device .* replication:Established')
source_v.event(r'device .* disk:UpToDate')

log('* Shut down and clean up.')
ahead_n.secondary()
resource.rmmod()
