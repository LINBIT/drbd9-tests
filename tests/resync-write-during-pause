#! /usr/bin/env python3
### vmshed: { "vms_all": [2], "vms_ci": null, "drbd_version_min": "9.0" }

# This test investigates what happens to write requests while a peer is in
# Outdated disk state. (Specifically when it is Outdated because it is the
# target of a paused resync)

# This was broken up to (including) drbd-9.1.8

from python import drbdtest
from python.drbdtest import log
from python import datatools

resource = drbdtest.setup(nodes=2)
resource.add_disk('10M')
resource.net_options = 'verify-alg md5;'
resource.up_wait()

log('* Make up-to-date data available.')
resource.skip_initial_sync()

[source_n, target_n] = resource.nodes
forward_c = resource.connections.from_node(source_n).to_node(target_n)[0]
backward_c = resource.connections.from_node(target_n).to_node(source_n)[0]

backward_c.disconnect()

log('* Writing while other node offline')
source_n.volumes[0].write(size='1M', bs='1M', direct=1)
source_n.drbdadm(['pause-sync', '%s:%s' % (resource.name, target_n.name)])

log('* Write while resync paused (not yet started)')
backward_c.connect()
forward_c.event(r'connection .* connection:Connected')
source_n.volumes[0].write(size='1M', bs='1M', offset='1M', direct=1)

log('* Resume resync and wait for it')
source_n.drbdadm(['resume-sync', '%s:%s' % (resource.name, target_n.name)])
target_n.volumes[0].event(r'device .* disk:UpToDate')

datatools.verify_data(resource.nodes, size_mb=2)

log('* Shut down and clean up.')
resource.down()
resource.teardown()
