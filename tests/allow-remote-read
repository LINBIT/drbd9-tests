#! /usr/bin/env python3

# This tests a feature in drbd where a node can be specified as "write-only".
# When we lose our disk, we try to resume operations remotely, so we look
# for UpToDate nodes to use for this purpose. With "allow-remote-read no", a
# node can be purposefully excluded from this search.
#
# This basically tests the following:
# 1) Create a 2-node cluster with one primary and one secondary
# 2) Configure the primary to disallow reading from the secondary
# 3) Make the primarys disk fail, forcing it to operate remotely
# 4) Observe that writes still succeed (remotely via the secondary), but
#    reads now fail.

from python import drbdtest
from python.drbdtest import verbose
from subprocess import CalledProcessError
import time

def read_from_node(node):
    for v in node.volumes:
        # read 8 MiB at offset 20 MiB
        node.run(['dd', 'if={0}'.format(v.device()), 'of=/dev/null', 'bs=4096',
                  'seek=5120', 'count=2048'])

resource = drbdtest.setup(min_nodes=2, max_nodes=2)
resource.resource_options = 'quorum majority; on-no-quorum io-error;'
primary_n = resource.nodes[0]
no_reads_n = resource.nodes[1]

resource.add_disk('128M')
resource.up_wait()

verbose('* Make up-to-date data available.')
resource.skip_initial_sync()

primary_n.primary()

# disallow remote reads from this node
primary_n.run(['drbdsetup', 'net-options', resource.name, no_reads_n.id, '--allow-remote-read=no'])

# kill disk of primary
resource.forbidden_patterns.difference_update([r'disk:Failed', r'peer-disk:Failed'])
primary_n.set_fault_injection(resource.volumes[0], drbdtest.DF_DATA_WRITE)

# verify that writes don't work
try:
    primary_n.volumes.write(count=1, flags=['conv=fsync'])
    raise RuntimeError("writing should have caused an error")
except CalledProcessError:
    # it failed, good
    pass

# verify that reads don't work
try:
    read_from_node(primary_n)
    raise RuntimeError("reading should have caused an error")
except CalledProcessError:
    # it failed, good
    pass

verbose('* Recover disk')
primary_n.disable_fault_injection(resource.volumes[0])
primary_n.down()
primary_n.up()

time.sleep(5)

verbose('* Shut down and clean up.')

resource.down()
resource.rmmod()
