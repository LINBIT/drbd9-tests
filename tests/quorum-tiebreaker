#! /usr/bin/env python3

import time
import random
from python import drbdtest
from python.drbdtest import log
from subprocess import CalledProcessError
import os

random.seed()

def assert_resync_dir(forward_c, backward_c, oos_str):
    v = resource.volumes[0]
    forward_pd = drbdtest.PeerDevice(forward_c, v)
    backward_pd = drbdtest.PeerDevice(backward_c, v)
    forward_pd.event(r'peer-device .* replication:SyncSource' + oos_str)
    forward_pd.event(r'peer-device .* replication:Established')
    backward_pd.event(r'peer-device .* replication:SyncTarget' + oos_str)
    backward_pd.event(r'peer-device .* replication:Established')

def my_log(str):
    log(str)
    for node in resource.nodes:
        node.run(["echo", str])

def test_case1():
    """
    Case 1: Network connection between primary and secondary is interrupted

       C             C
      / \     ->    / \
     /   \         /   \
    A --- B       A -x- B

    This should have the effect that B's disk becomes outdated, but both nodes
    keep quorum because the connection to the diskless tiebreaker node is
    still active. Two partitions are formed, A-C and B-C
    """
    my_log('* Test Case 1')
    # simulate network outage between A and B
    resource.forbidden_patterns.remove(r'connection:NetworkFailure') # network failure is expected
    resource.forbidden_patterns.remove(r'connection:Timeout')
    resource.forbidden_patterns.add(r'quorum:no') # no nodes should lose quorum

    my_log('* Blocking A-B')
    A.block_path(B, 0)

    # wait for disconnect
    conn = resource.connections.from_node(A).to_node(B)
    conn.event(r'connection:(NetworkFailure|Timeout)')
    B.event(r'device .* disk:Outdated') # verify that secondary becomes outdated

    # reconnect
    my_log('* Unblocking A-B')
    A.unblock_path(B)
    conn.event(r'connection .* connection:Connected')
    my_log('* All nodes connected again')
    resource.forbidden_patterns.add(r'connection:NetworkFailure')
    resource.forbidden_patterns.add(r'connection:Timeout')
    resource.forbidden_patterns.remove(r'quorum:no')

def test_case2():
    """
    Case 2: Network connection between primary and secondary is interrupted,
            and the secondary loses the diskless tiebreaker node

       C             C
      / \     ->    / x
     /   \         /   x
    A --- B       A -x- B

    The desired outcome is that B loses quorum, while A keeps it (and forms a
    partition with C). Also, when B eventually reconnects to the tiebreaker
    node, it should *NOT* regain quorum.
    """
    my_log('* Test Case 2')
    # simulate network outage between A and B
    resource.forbidden_patterns.remove(r'connection:NetworkFailure') # network failure is expected
    resource.forbidden_patterns.remove(r'connection:Timeout')

    my_log('* Blocking A-B')
    A.block_path(B, 0)
    my_log('* Blocking B-C')
    B.block_path(C, 0)

    # wait for disconnect
    connab = resource.connections.from_node(A).to_node(B)
    connbc = resource.connections.from_node(B).to_node(C)
    connac = resource.connections.from_node(A).to_node(C)
    connab.event(r'connection:(NetworkFailure|Timeout)')
    connbc.event(r'connection:(NetworkFailure|Timeout)')

    A.event(r'connection:Unconnected', no=r'quorum:no') # primary should not lose quorum
    B.event(r'connection:Unconnected', r'quorum:no') # secondary should lose quorum

    # tiebreaker "switches sides", nobody should gain quorum from this
    my_log('* Blocking A-C')
    A.block_path(C, 0)
    A.event(r'connection:Unconnected', r'quorum:no') # A should lose quorum
    resource.forbidden_patterns.add(r'quorum:yes') # B should NOT regain quorum
    my_log('* Unblocking B-C')
    B.unblock_path(C)
    connbc.event(r'connection .* connection:Connected')

    # reconnect
    resource.forbidden_patterns.remove(r'quorum:yes')
    my_log('* Unblocking A-B')
    A.unblock_path(B)
    connab.event(r'connection .* connection:Connected')
    A.event(r'quorum:yes')
    B.event(r'quorum:yes')
    my_log('* Unblocking A-C')
    A.unblock_path(C)
    connac.event(r'connection .* connection:Connected')

    my_log('* All nodes connected again')
    resource.forbidden_patterns.add(r'connection:NetworkFailure')
    resource.forbidden_patterns.add(r'connection:Timeout')

def test_case3():
    """
    Case 3: Network connection between primary and secondary is interrupted,
            and the primary loses the diskless tiebreaker node

       C             C
      / \     ->    X \
     /   \         X   \
    A --- B       A -x- B

    The desired outcome is that the secondary keeps quorum so that it could be
    promoted to primary and the application could keep running there. The
    primary should lose quorum and should *NOT* regain it once it reconnects
    to the diskless tiebreaker node.
    """
    my_log('* Test Case 3')
    resource.forbidden_patterns.remove(r'connection:NetworkFailure') # network failure is expected
    resource.forbidden_patterns.remove(r'connection:Timeout')

    connab = resource.connections.from_node(A).to_node(B)
    connac = resource.connections.from_node(A).to_node(C)
    connbc = resource.connections.from_node(B).to_node(C)

    my_log('* Blocking A-C')
    A.block_path(C, 0)
    connac.event(r'connection:(NetworkFailure|Timeout)')

    my_log('* Blocking A-B')
    A.block_path(B, 0)
    connab.event(r'connection:(NetworkFailure|Timeout)')

    A.event(r'connection:Unconnected', r'quorum:no') # primary should lose quorum
    B.event(r'connection:Unconnected', no=r'quorum:no') # secondary should not lose quorum

    # tiebreaker "switches sides", nobody should gain quorum from this
    my_log('* Blocking B-C')
    B.block_path(C, 0)
    B.event(r'connection:Unconnected', r'quorum:no') # B should lose quorum
    resource.forbidden_patterns.add(r'quorum:yes')
    my_log('* Unblocking A-C')
    A.unblock_path(C)
    connac.event(r'connection .* connection:Connected')

    # reconnect
    resource.forbidden_patterns.remove(r'quorum:yes')
    my_log('* Unblocking A-B')
    A.unblock_path(B)
    connab.event(r'connection .* connection:Connected')
    A.event(r'quorum:yes')
    my_log('* Unblocking B-C')
    B.unblock_path(C)
    connbc.event(r'connection .* connection:Connected')

    my_log('* All nodes connected again')
    resource.forbidden_patterns.add(r'connection:NetworkFailure')
    resource.forbidden_patterns.add(r'connection:Timeout')

def test_case3_promote():
    """
    Case 3 (with promotion): Like case 3, but B gets promoted to primary and A
    demoted to secondary while the A-B connection is interrupted. Reconnecting
    the two nodes should then trigger a resync.
    """
    my_log('* Test Case 3 (promote)')

    resource.forbidden_patterns.remove(r'connection:NetworkFailure') # network failure is expected
    resource.forbidden_patterns.remove(r'connection:Timeout')

    connab = drbdtest.Connection(A, B)
    connba = drbdtest.Connection(B, A)
    connac = resource.connections.from_node(A).to_node(C)
    connbc = resource.connections.from_node(B).to_node(C)

    my_log('* Blocking A-C')
    A.block_path(C, 0)
    connac.event(r'connection:(NetworkFailure|Timeout)')

    my_log('* Blocking A-B')
    A.block_path(B, 0)
    connab.event(r'connection:(NetworkFailure|Timeout)')

    #B.event(r'disk:UpToDate')

    A.event(r'device .* quorum:no') # primary should lose quorum
    B.event(r'quorum:yes') # secondary should not lose quorum

    # A -> secondary, B -> primary
    A.secondary()
    B.primary(wait=True)

    B.volumes.write(direct=1)

    # reconnect A-B
    my_log('* Unblocking A-B')
    A.unblock_path(B)
    connab.event(r'connection .* connection:Connected')
    connba.event(r'connection .* connection:Connected')

    assert_resync_dir(connba, connab, ' .* out-of-sync:4')

    # reconnect
    my_log('* Unblocking A-C')
    A.unblock_path(C)
    connac.event(r'connection .* connection:Connected')

    B.secondary()
    A.primary(wait=True)

    my_log('* All nodes connected again')
    resource.forbidden_patterns.add(r'connection:NetworkFailure')
    resource.forbidden_patterns.add(r'connection:Timeout')

resource = drbdtest.setup(min_nodes=3, max_nodes=3)

resource.resource_options = 'quorum majority; on-no-quorum io-error;'
resource.net_options = 'ping-timeout 5; ping-int 1; connect-int 1;'

# step 1: connect
A = resource.nodes[0]
B = resource.nodes[1]
C = resource.nodes[2]
resource.add_disk('1M', diskful_nodes=[A,B])

resource.up_wait()

my_log('* Make up-to-date data available.')
resource.skip_initial_sync()

A.primary()
my_log('* All nodes connected')

cases = [test_case1, test_case2, test_case3, test_case3_promote]
random.shuffle(cases)

log('Execution order: ' + str([c.__name__ for c in cases]))

for case in cases:
    case()

# run all tests again, but this time with a fixed quorum amount
resource.resource_options = 'quorum 2; on-no-quorum io-error;'
resource.nodes.config_changed = True
resource.nodes.update_config()

for case in cases:
    case()

# clean up
resource.forbidden_patterns.remove(r'connection:NetworkFailure')
resource.forbidden_patterns.remove(r'connection:Timeout')

resource.down()

try:
    A.run(['udevadm', 'settle', '--timeout=2'])
except:
    pass

resource.rmmod()
