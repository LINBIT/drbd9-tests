#! /usr/bin/env python3

# This test examines the resync direction decisions when nodes
# reconnect that have the same current UUID.
#
# Currently it tests rule_nr=39 of drbd_uuid_compare(),
# disk_states_to_strategy() and a part of strategy_to_repl_state()
# (where it handles the *_IF_BOTH_FAILED strategies).
#
# This was broken up until (including) drbd-9.0.27

from python import drbdtest
from python.drbdtest import log

resource = drbdtest.setup(nodes=3)
resource.add_disk('10M')
resource.resource_options = 'quorum 2; on-no-quorum io-error;'
resource.up_wait()

resource.forbidden_patterns.remove(r'connection:NetworkFailure')
resource.forbidden_patterns.remove(r'connection:BrokenPipe')

log('* Make up-to-date data available.')
resource.skip_initial_sync()

node_a, node_b, node_c = resource.nodes
connection_ab = resource.connections.from_node(node_a).to_node(node_b)[0]
connection_ca = resource.connections.from_node(node_c).to_node(node_a)[0]
connection_bc = resource.connections.from_node(node_b).to_node(node_c)[0]
connection_cb = resource.connections.from_node(node_c).to_node(node_b)[0]
peer_device_ac = resource.peer_devices.from_node(node_a).to_node(node_c)[0]
connections_b = resource.connections.from_node(node_b)

def test(method=None, promote=None, src_method=None):
    log('* test variant: method=%s, promote=%s, src_method=%s' %
        (str(method), str(promote), str(src_method)))

    node_a.primary()
    resource.connections.from_node(node_c).disconnect(wait=False)
    node_c.disks[0].event('device .* disk:Outdated')

    connections_b.disconnect(force=True)
    connection_ab.event(r'connection .* connection:Connecting')
    node_a.down()
    # At this point node_a has UUID_FLAG_PRIMARY_LOST_QUORUM set.

    connections_bc = drbdtest.Connections([connection_bc, connection_cb])
    connections_bc.connect()
    connections_bc.event(r'connection .* connection:Connected')
    node_c.primary()

    connection_bc.disconnect(force=True)
    node_c.event(r'quorum:no')
    node_c.secondary()
    # Now node_c has UUID_FLAG_PRIMARY_LOST_QUORUM set as well.

    node_a.up()

    # Both sides have UUID_FLAG_PRIMARY_LOST_QUORUM, and the RESOLVE_CONFLICTS bit
    # selects node_c for sync-source. Give reasons for the reverse direction:
    dstate_after_resync = 'UpToDate'
    if method:
        node_c.run(['drbdsetup', method, '/dev/drbd%s' % str(node_c.disks[0].minor)])
    if promote:
        node_a.resource_options(['--quorum=off'])
        node_a.primary()
    if src_method:
        node_a.run(['drbdsetup', src_method, '/dev/drbd%s' % str(node_a.disks[0].minor)])
        dstate_after_resync = 'Outdated'

    log('* Check resync direction. (method=%s, promote=%s, src_method=%s)' %
        (str(method), str(promote), str(src_method)))

    connection_ca.connect()
    connection_ca.event(r'connection .* connection:Connected')
    peer_device_ac.event(r'peer-device .* replication:SyncSource')
    node_c.disks[0].event('device .* disk:%s' % (dstate_after_resync))

    if promote:
        node_a.secondary()
        node_a.resource_options(['--quorum=2'])

    log('* Restore node_b connections.')
    connections_b.connect()
    resource.connections.to_node(node_b).event(r'connection .* connection:Connected')

test(method='outdate')
test(method='invalidate')
test(promote=True)
test(method='invalidate', src_method='outdate')

log('* Shut down and clean up.')
resource.down()
resource.teardown()
