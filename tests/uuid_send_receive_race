#! /usr/bin/env python3
#
# When DRBD exchanges UUIDs after establishing a conneciton. It sends its
# current UUID and expects to learn about the current UUID of the peer
# very soon. When it gets that it compares the peer's UUIDs with its
# own.
# The problem is if our own current UUID changes between we sent it
# and we got the peers current UUID. It can change because we are doing
# a resync on an other connection.
# When all that happens you see one end of a connection in
# replication:WFBitMapS and the other end in eplication:Established

from python import drbdtest
from python.drbdtest import verbose
import os

def my_verbose(str):
    verbose(str)
    for node in resource.nodes:
        node.run(["echo", str])

resource = drbdtest.setup(min_nodes=3, max_nodes=3)
resource.disk_options = 'c-max-rate 750k;'
resource.nodes.config_changed = True
resource.nodes.update_config()
resource.add_disk('10M')
resource.up_wait()

A = resource.nodes[0]
B = resource.nodes[1]
C = resource.nodes[2]
from_a = resource.connections.from_node(A)
to_a = resource.connections.to_node(A)
a_b = drbdtest.Connection(A, B)
a_b_pd = drbdtest.PeerDevice(a_b, resource.volumes[0])
c_a = drbdtest.Connection(C, A)
c_a_pd = drbdtest.PeerDevice(c_a, resource.volumes[0])

my_verbose('* Make up-to-date data available.')
resource.skip_initial_sync()

my_verbose('* Preparing scenario.')
from_a.disconnect()
to_a.event(r'connection:Unconnected')

resource.forbidden_patterns.difference_update([
    r'connection:ProtocolError',
    r'connection:BrokenPipe'
])

B.volumes.write(1, bs='1M', flags=['oflag=direct'])
A.block_packet_type(drbdtest.P_UUIDS110, from_node=C)
from_a.connect()
to_a.event(r'connection:Connected')

a_b_pd.event(r'peer-device .* replication:SyncTarget')
a_b_pd.event(r'peer-device .* replication:Established')

A.unblock_packet_type(drbdtest.P_UUIDS110, from_node=C)
my_verbose('* Here is the test.')

c_a_pd.event(r'peer-device .* replication:Established')

verbose('* Shut down and clean up.')

resource.down()
resource.rmmod()
