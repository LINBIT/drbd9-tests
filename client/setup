#! /bin/bash

# FIXME: Add verbose mode in which all commands are logged ...
# FIXME: Check for ntp on the test nodes and the client

HERE=${0%/*}
. $HERE/param.sh
. $HERE/client.sh
set -e

instantiate_template() {
    local I=("${INSTANTIATE[@]}") option n

    for ((n = 0; n < ${#NODES[n]}; n++)); do
	node=${NODES[n]}
	I[${#I[@]}]=--node=${FULL_HOSTNAMES[n]}
	for param in ${!DEVICE*} ${!DISK*} ${!META*} ${!NODE_ID*} ${!ADDRESS*}; do
	    eval "[ -n "\${$param[\$node]+x}" ]" || continue
	    option=${param//[0-9]}; option=${option//_/-}; option=${option,,}
	    eval "I[\${#I[@]}]=--\$option=\${$param[\$node]}"
	done
    done
    I[${#I[@]}]=$opt_template
    do_debug $HERE/instantiate-template "${I[@]}"
}

listen_to_events() {
    for node in "$@"; do
	ssh -q root@$node drbdsetup events all > $DRBD_TEST_JOB/events-$node &
	echo $! > run/events-$node.pid
    done

    cleanup_events() {
	local pids

	shopt -s nullglob
	set -- run/events-*.pid
	if [ $# -gt 0 ]; then
	    pids=( $(cat "$@") )
	    kill "${pids[@]}"
	    wait "${pids[@]}"
	    rm -f "$@""$@"
	fi
    }
    register_cleanup cleanup_events
}

# - which test nodes?
# - which test volumes to create, which sizes?

# - receive `drbdsetup events all' output form all nodes
# - check for state changes (very next state change that matches a pattern,
#   either no in-between state change or forbidden patterns)

#
# setup --job=... --resource=... --disk=10M --meta=1M --node=node1 [--address=...] --node=node2 [--address=...]
# setup --job=... --resource=... --node=node1 --disk=10M --node=node2 --disk=20M
#

# Die if we cannot access a node ...

# Save current configuration so that standalone scripts can access it

usage() {
    [ $1 -eq 0 ] || exec >&2
    cat <<EOF
USAGE: ${0##*/} [options] ...
EOF
    exit $1
}

options=`getopt -o vh --long job:,volume-group:,resource:,node:,device:,disk:,meta:,node-id:,address:,no-create-md,debug,port:,template:,cleanup:,help,verbose -- "$@"` || usage 1
eval set -- "$options"

declare opt_debug= opt_verbose=
declare opt_resource= opt_job= opt_create_md=1 opt_volume_group=scratch
declare opt_template=m4/template.conf.m4
declare opt_cleanup=always
declare -a INSTANTIATE

while :; do
    case "$1" in
    --port)
	INSTANTIATE=("${INSTANTIATE[@]}" "$1=$2")
	;;
    esac

    case "$1" in
    -h|--help)
        usage 0
        ;;
    --debug)
        opt_debug=1
        ;;
    -v|--verbose)
	opt_verbose=1
	;;
    --job)
	opt_job=$2
	shift
	;;
    --volume-group)
	opt_volume_group=$2
	shift
	;;
    --resource)
	opt_resource=$2
	shift
	;;
    --template)
	opt_template=$2
	;;
    --node)
	new_node "$2" ${!DEVICE*} ${!DISK_SIZE*} ${!META_SIZE*}
	shift
	;;
    --disk|--meta)
	add_node_param "$1-size" "$node" "$2"
	shift
	;;
    --node-id|--address|--device|--volume-group)
	add_node_param "$1" "$node" "$2"
	shift
	;;
    --port)
        shift
        ;;
    --no-create-md)
	opt_create_md=
	;;
    --cleanup)
	case "$2" in
	always|never|success)
	    opt_cleanup=$2
	    ;;
	*)
	    usage 1
	    ;;
	esac
	shift
	;;
    --)
	shift
	break
	;;
    esac
    shift
done

[ -n "$opt_job" ] || usage 1
if [ -z "$opt_resource" ]; then
    opt_resource=$opt_job
fi
INSTANTIATE=("${INSTANTIATE[@]}" "--resource=$opt_resource")
jobdir=$opt_job
export DRBD_TEST_JOB=$opt_job

connect_to_nodes "${NODES[@]}"
ALL_NODES=( $(seq -f NODE%g 0 $((${#NODES[@]} - 1))) )

if [ "$opt_cleanup" = "always" ]; then
    on -n "${ALL_NODES[@]}" onexit cleanup
fi

mkdir -p run

listen_to_events "${NODES[@]}"

rsyslogd -i $PWD/run/rsyslogd.pid -f <(
    sed -e "s:@PORT@:$RSYSLOGD_PORT:g" \
	-e "s:@DRBD_TEST_DIR@:$PWD:g" \
	-e "s:@DRBD_TEST_JOB@:$DRBD_TEST_JOB:g" rsyslog.conf.in)
register_cleanup kill $(cat run/rsyslogd.pid)

hostname=$(hostname -f)
for ((n = 0; n < ${#NODES[n]}; n++)); do
    on -n NODE$n rsyslogd $hostname $RSYSLOGD_PORT
done

exec < /dev/null

# Replace the node names we were passed with the names under which the nodes
# know themselves: drbd depends on this in its config files.
FULL_HOSTNAMES=( "${NODES[@]}" )
for ((n = 0; n < ${#NODES[n]}; n++)); do
    node=${NODES[n]}
    hostname=$(on NODE$n hostname -f)
    if [ "$hostname" != "$node" ]; then
	echo "$node: full hostname = $hostname"
	FULL_HOSTNAMES[$n]=$hostname
    fi
done

# FIXME: The disks could be created in parallel ...
for ((n = 0; n < ${#NODES[n]}; n++)); do
    node=${NODES[n]}

    for disk_size in ${!DISK_SIZE*} ${!META_SIZE*}; do
	eval "size=\${$disk_size[\$node]}"
	[ -n "$size" ] || continue
	disk=${disk_size/_SIZE}
	device=$(on NODE$n create-disk \
	    --job=$opt_job \
	    --volume-group=$opt_volume_group \
	    --size=$size $DRBD_TEST_JOB-${disk,,})
	verbose "$node: disk $device created ($size)"
	eval "$disk[\$node]=\"$device\""
    done
done
unset ${!DISK_SIZE*} ${!META_SIZE*}

mkdir -p "$jobdir"
instantiate_template > $jobdir/drbd.conf

for ((n = 0; n < ${#NODES[n]}; n++)); do
    on NODE$n install-config < $jobdir/drbd.conf
done

if [ -n "$opt_create_md" ]; then
    for ((n = 0; n < ${#NODES[n]}; n++)); do
	msg=$(on NODE$n drbdadm -- --force create-md "$opt_resource" 2>&1) || status=$?
	if [ -n "$status" ]; then
	    echo "$msg" >&2
	    exit $status
	fi
    done
fi

if [ "$opt_cleanup" = "success" ]; then
    on "${ALL_NODES[@]}" cleanup
fi
