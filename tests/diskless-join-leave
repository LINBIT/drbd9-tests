#! /usr/bin/env python3
#
# This test configures a 3 node system, two diskfull one diskless.
# (Quorum enabled) Then it adds one more diskless and removes the
# previous diskless.

import random
import time
from python import drbdtest
from python.drbdtest import log

random.seed()
resource = drbdtest.setup(min_nodes=4, max_nodes=4)
diskless_nodes = drbdtest.Nodes(random.sample(list(resource.nodes), 2))
diskful_nodes = resource.nodes.difference(diskless_nodes)
resource.add_disk('10M', diskful_nodes=diskful_nodes)
resource.resource_options = 'quorum majority; on-no-quorum io-error;'

late_diskless_n = random.choice(diskless_nodes)
[early_diskless_n] = drbdtest.Nodes(diskless_nodes).remove(late_diskless_n)

resource.remove_node(late_diskless_n)
resource.up_wait()

log('* Make up-to-date data available (%s is not part)' % (late_diskless_n.name))
resource.skip_initial_sync()

primary_n = random.choice(diskful_nodes)
primary_n.primary()
resource.connections.to_node(primary_n).event(r'connection .* role:Primary')

log('* Preparing existing nodes for new diskless')
early_set = drbdtest.Nodes(resource.nodes)
ld_connections = early_set.connections_to_node(late_diskless_n)
ld_connections.extend(early_set.connections_from_node(late_diskless_n))
resource.add_node(late_diskless_n)
early_set.adjust()

log('* New diskless node joins (%s)' % (late_diskless_n.name))

late_diskless_n.adjust()
ld_connections.event(r'connection .* connection:Connected')

log('* Removing other diskless (%s)' % (early_diskless_n.name))

ed_connections = resource.connections.from_node(early_diskless_n)
resource.remove_node(early_diskless_n)
resource.nodes.adjust()
ed_connections.event(r'connection .* connection:Connecting')
early_diskless_n.down()

# This time remove a diskless and leave the connections from the diskful in place.
# That is an other path in the DRBD code...
log('* Removing the later joined diskless again (%s)' % (late_diskless_n.name))
late_diskless_n.down();
l_connections = diskful_nodes.connections_to_node(late_diskless_n)
l_connections.event(r'connection .* connection:Connecting')

log('* Shut down and clean up.')
diskful_nodes.down()
resource.teardown()

