#! /usr/bin/env python3
### vmshed: { "vms_all": [2], "vms_ci": [2], "drbd_version_min": "9.1", "variants": ["tcp", "rdma", "zfs"] }

# Before DRBD-9.1.6 this caused a fully allocated
# backing volume on the resync target node after
# the resync

import json
import os

from python import drbdtest
from python.drbdtest import log

def data_percent(n):
    backend = os.environ.get('DRBD_TEST_STORAGE', 'lvm')
    if backend == 'lvm':
        json_str = n.run(['lvs', '--reportformat', 'json'], return_stdout=True, update_config=False)
        lvs_rep = json.loads(json_str)

        for lvsl in lvs_rep['report'][0]['lv']:
            if lvsl['lv_name'] == n.volumes[0].disk_lv:
                return lvsl['data_percent']

        raise Exception("My volume was not in the lvs output. Kaboom!")
    elif backend == 'zfs':
        dataset = n.volumes[0].disk[len("/dev/zvol/"):]
        lines = n.run(['zfs', 'get', '-Hp', 'used,volsize', dataset],
                        return_stdout=True, update_config=False).splitlines()
        used = int(lines[0].split()[2])
        volsize = int(lines[1].split()[2])
        return used / volsize
    else:
        raise NotImplementedError('Used percentage not implemented for backend "{}"'.format(backend))


resource = drbdtest.setup(nodes=2)
resource.disk_options = 'discard-zeroes-if-aligned yes; rs-discard-granularity 65536; c-max-rate 10M;'
resource.add_disk('11M', thin=True)

node_a, node_b = resource.nodes
dev_name = node_a.volumes[0].device()

node_a.up_wait()
node_a.primary(force=True)
node_a.secondary()

node_b.up_wait()

connection_ba = resource.connections.from_node(node_b).to_node(node_a)
peer_devices_ba = drbdtest.PeerDevices.from_connections(connection_ba)
peer_devices_ba.event(r'peer-device .* replication:SyncTarget')
peer_devices_ba.event(r'peer-device .* replication:Established')

data_percent_a = data_percent(node_a)
data_percent_b = data_percent(node_b)

if data_percent_a != data_percent_b:
    raise Exception("node_a data_percent {} while node_b shows {}"
                    .format(data_percent_a, data_percent_b))

log('* Shut down and clean up.')
resource.down()
resource.teardown()
