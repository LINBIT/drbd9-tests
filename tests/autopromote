#! /usr/bin/env python3
### vmshed: { "vms_all": [2], "vms_ci": [2], "drbd_version_min": "9.0" }

# This test checks that autopromote works immediately after
# conneciton loss to the peer (I.e. before the local node
# noticed the absence of the peer).

import json
import time
from python import drbdtest
from python.drbdtest import connections, log, peer_devices
from python import busywrite

READ_ONLY = '<'
READ_WRITE = '>'
SUCCESS = 'OK'
FAILURE = 'FAILED'

def test_open(node, mode, expect):
    r = node.run(['bash', '-c',
                  'time : %s %s && echo OK || echo FAILED' %
                  (mode, resource.volumes[0].device())], return_stdout=True)
    assert r == expect

###

resource = drbdtest.setup_resource(nodes=2)
node_a, node_b = resource.nodes
resource.add_disk('10M')

log('* Make up-to-date data available.')
resource.up_wait()
resource.skip_initial_sync()
resource.forbidden_patterns.remove(r'connection:NetworkFailure') # network failure is expected
resource.forbidden_patterns.remove(r'connection:BrokenPipe')
resource.forbidden_patterns.remove(r'connection:Timeout')

log('* Tests with peer secondary.')

test_open(node_a, READ_ONLY, SUCCESS)
resource.connections.block(jump_to="DROP")
test_open(node_a, READ_ONLY, SUCCESS)
test_open(node_a, READ_WRITE, SUCCESS)
test_open(node_a, READ_ONLY, SUCCESS)
resource.connections.unblock(jump_to="DROP")
resource.peer_devices.event(r'peer-device .* replication:Established')

log('* Tests with peer primary.')
node_b.primary()
test_open(node_a, READ_ONLY, FAILURE)
resource.connections.block(jump_to="DROP")
test_open(node_a, READ_ONLY, SUCCESS)
test_open(node_a, READ_WRITE, SUCCESS)
test_open(node_a, READ_ONLY, SUCCESS)
resource.connections.unblock(jump_to="DROP")
resource.peer_devices.event(r'peer-device .* replication:Established')
node_b.secondary()

# This was broken from DRBD 9.1.7 to 9.1.16 inclusive.
log('* Test auto-demote on SIGTERM.')
# Prevent ping timeouts while the control stream is blocked
resource.net_options = 'ping-timeout 40;'
resource.nodes.adjust()

node_a.block_packet_type(drbdtest.P_WRITE_ACK, from_node=node_b)
opener = busywrite.BusyWrite(node_a.volumes[0])
opener.start(fio_base_args='--rw=write --size=4k --direct=1')

# Allow time for auto-promote; write is blocked
time.sleep(0.5)

# Unblock write; allow time for auto-demote to start, but block it
node_a.block_packet_type(drbdtest.P_TWOPC_YES, from_node=node_b, volume=0xffff)
node_a.unblock_packet_type(drbdtest.P_WRITE_ACK, from_node=node_b)
time.sleep(1.0)

# Terminate during auto-demote; signal must be sent to the exact process that
# is in the close() syscall
opener.kill_jobs()
node_a.unblock_packet_type(drbdtest.P_TWOPC_YES, from_node=node_b, volume=0xffff)
opener.wait()

# Check current status instead of events because fio opens and closes the
# device multiple times, causing multiple promotes and demotes
result = node_a.run(['drbdsetup', 'status', resource.name, '--json'], return_stdout=True)
status = json.loads(result)[0]
drbdtest.ensure('Secondary', status['role'])

log('* Shut down and clean up.')
resource.down()
resource.cluster.teardown()
