#! /usr/bin/env python3
### vmshed: { "vms_all": [3], "vms_ci": [3], "drbd_version_min": "9.0" }

# Two concurrent resyncs from one source. one resync finishes earlier
# than the other one. This test verifies that the SyncTarget of the
# quicker resync does not mark the other SyncTarget's disk as
# Outdated.
#
# That happened up to (including) 9.0.24

import re
import time
from python import drbdtest
from python.drbdtest import connections, log, peer_devices
from lbpytest.logscan import NegativeMatchException

resource = drbdtest.setup(nodes=3)
resource.add_disk('50M')

source_n = resource.nodes[0]
resource.forbidden_patterns.add(r'peer-disk:Outdated')

def test():
    resource.nodes.drbdadm(['--force', 'create-md', resource.name])
    resource.nodes.new_resource()
    resource.nodes.new_minor()
    resource.nodes.attach()

    source_n.primary(force=True)
    source_n.secondary()
    source_n.primary()
    source_n.secondary()
    source_n.primary()

    resource.nodes.adjust()

    source_pds = peer_devices(source_n)
    target_pds = peer_devices(to_node=source_n)
    try:
        # One peer device may reach Established before the other reaches
        # SyncSource. Match both the SyncSource and Established events in the
        # same event call.
        source_pds.event(r'peer-device .* replication:SyncSource',
                r'peer-device .* replication:Established peer-disk:UpToDate')
        target_pds.event(r'peer-device .* replication:SyncTarget')
        target_pds.event(r'peer-device .* replication:Established')
    except NegativeMatchException:
        time.sleep(2)
        for n in resource.nodes:
            status_str = n.run(['drbdsetup', 'status', resource.name], return_stdout=True)
            if re.search(r'peer-disk:Outdated', status_str):
                raise Exception("It is broken\n%s" % (status_str))

    resource.down()

for x in range(0, 40):
    test()

resource.teardown()
