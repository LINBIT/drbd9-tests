#! /usr/bin/env python3
### vmshed: { "vms_all": [3], "vms_ci": [3], "drbd_version_min": "9.0" }

# This test is run on a 3-node cluster, A, B, C.
#
# C is made Primary
# A disconnects from B
# while "simultaneously" C disconnects from A
#
# We used to have a potential for a circular deadlock on A in that case.

from python import drbdtest
from python.drbdtest import connections, log, peer_devices

resource = drbdtest.setup_resource(nodes=3)
resource.net_options = 'connect-int 1;'

node_a, node_b, node_c = resource.nodes

a_b = connections(node_a, node_b)
a_c = connections(node_a, node_c)
c_a = connections(node_c, node_a)

resource.add_disk('10M')
resource.up_wait()
resource.skip_initial_sync()

# Test for a potential circular deadlock regression in 9.1.20 / 9.2.9.
#
# Try it a few times, the potential deadlock is a race.
#
# Adding more secondary peers and using "down" instead of "del_peer"
# would make it more likely to hit the race.
#
# If the test logs are in some tmpfs (do not slow down .run()),
# it frequently triggered within the first three iterations for me.
# Single iteration took about 2 to 4 seconds.
for n in range(10):
	if n > 0:
		resource.up_wait(expected_disk_states=["UpToDate"])

	log('\n * === iteration {} ==='.format(n))
	log('* promote C; concurrently disconnect a from b and c from a')
	node_c.primary()

	# $(drbdadm -d), because I want the drbdsetup pid;
	# drbdadm exits after "short command timeout",
	# leaving an orphaned blocked drbdsetup behind.
	pid = node_a.run(['setsid', 'bash', '-c',
		'$(drbdadm -d del-peer {}:{}) &>/dev/null </dev/null & echo $!'.format(resource.name, node_b.name)],
		return_stdout=True)

	node_c.run(['bash', '-c', 'drbdadm disconnect {}:{}'.format(resource.name, node_a.name)])

	log('\n* wait for disconnect command on a')
	node_a.run(['tail', '--pid={}'.format(pid), '-f', '/dev/null'], timeout=30)

	log('* wait for a->c to cycle back to Connecting')
	a_c.event(r'connection .* connection:Connecting')
	resource.down()

log('\n* Shut down and clean up.')
resource.cluster.teardown()
