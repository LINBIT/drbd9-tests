#! /usr/bin/env python3
### vmshed: { "vms_all": [3], "vms_ci": [3], "drbd_version_min": "9.0" }

# Part I of the test:
# This tests generates as many data-generations as you pass nodes, by
# disconnecting each node and writing on one in between the disconnect
# operations. The "one" node is the "writing_n" in the code.
#
# Then beginning with the oldest the nodes are formed to a chain,
# verifying in each step the resync (direction and amount).
#
# Finally the node with the latest data-set is connected to the node
# that had the oldest data-set, causing a wave of resyncs propagating
# through the chain. That is verified as well.
#
# Finally the chain is formed to a ring and it is verified that
# no resync happens at that stage.

from python import drbdtest
from python.drbdtest import connections, log, peer_devices

def write_on_node(node):
    global write_offset
    node.volumes.write(offset='{}K'.format(write_offset), end_fsync=1)
    write_offset += 4

def assert_resync_dir(forward_c, backward_c, oos_str):
    v = resource.volumes[0]
    forward_pd = drbdtest.PeerDevice(forward_c, v)
    backward_pd = drbdtest.PeerDevice(backward_c, v)
    forward_pd.event(r'peer-device .* replication:SyncSource' + oos_str)
    forward_pd.event(r'peer-device .* replication:Established')
    backward_pd.event(r'peer-device .* replication:SyncTarget' + oos_str)
    backward_pd.event(r'peer-device .* replication:Established')

def connect_and_check_resync(newer_n, older_n):
    forward_c = connections(newer_n, older_n)
    backward_c = connections(older_n, newer_n)
    cs = drbdtest.Connections([forward_c, backward_c])
    cs.connect()
    cs.event(r'connection .* connection:Connected')
    assert_resync_dir(forward_c, backward_c, ' .* out-of-sync:4')

def disconnect_reverse(writing_n, nodes):
    log('* Disconnect nodes, writing in between')
    remaining = [writing_n, *nodes]
    for n in reversed(nodes):
        write_on_node(writing_n)
        connections(n).disconnect()
        remaining.remove(n)
        to = connections(from_nodes=remaining, to_node=n)
        to.event(r'connection .* connection:TearDown')
        to.event(r'connection .* connection:Connecting')

def connect_them_oldest_first(nodes):
    log('* Reconnecting them starting from the most outdated one')
    for i in range(len(nodes)-1, 0, -1):
        connect_and_check_resync(nodes[i-1], nodes[i])

def connect_oldest_to_newest(newest_n, nodes):
    log('* Reconnecting the newest with the (former) oldest node of the chain')
    oldest_n = nodes[-1]
    forward_c = connections(newest_n, oldest_n)
    backward_c = connections(oldest_n, newest_n)
    backward_c.connect()
    assert_resync_dir(forward_c, backward_c, ' .* out-of-sync:4')

    log('* Verify a "wave" of resyncs going through the chain of nodes')
    for i in range(len(nodes)-1, 0, -1):
        forward_c = connections(nodes[i], nodes[i-1])
        backward_c = connections(nodes[i-1], nodes[i])
        #nodes[i].run(['true', 'mark_from']) # mark in syslog
        #nodes[i-1].run(['true', 'mark_to'])
        log('* from %s to %s' % (nodes[i-1], nodes[i]))
        assert_resync_dir(forward_c, backward_c, ' .* out-of-sync:4')

def form_a_ring(newest_n, nodes):
    log('* Completing the ring, verifying no resync happens')
    end_n = nodes[0]
    forward_c = connections(end_n, newest_n)
    resource.forbidden_patterns.update([r'replication:SyncSource', r'replication:SyncTarget'])
    forward_c.connect()
    forward_pd = drbdtest.PeerDevice(forward_c, resource.volumes[0])
    forward_pd.event(r'peer-device .* replication:Established')
    resource.forbidden_patterns.difference_update([r'replication:SyncSource', r'replication:SyncTarget'])

def form_a_chain(nodes):
    forward_c = connections(nodes[0], nodes[-1])
    backward_c = connections(nodes[-1], nodes[0])
    cs = drbdtest.Connections([forward_c, backward_c])
    cs.disconnect()

def write_on_head(nodes):
    head_n = nodes[0]
    tail_n = nodes[-1]

    log('* Part II of test')

    for c in range(0,4):
        write_on_node(head_n)
        log('* Verify a (forward) "wave" of resyncs going through the chain of nodes')
        for i in range(1, len(nodes)-1):
            forward_c = connections(nodes[i], nodes[i+1])
            backward_c = connections(nodes[i+1], nodes[i])
            log('* from %s to %s' % (nodes[i], nodes[i+1]))
            assert_resync_dir(forward_c, backward_c, ' .* out-of-sync:4')

def disconnect_chain(nodes):
    cs = drbdtest.Connections()
    for node0, node1 in zip(nodes, nodes[1:]):
        cs.extend(connections(node0, node1))
        cs.extend(connections(node1, node0))
    cs.disconnect()

def part_iii(nodes):
    (a,b,c) = nodes
    ac = connections(nodes[0], nodes[2])
    ca = connections(nodes[2], nodes[0])
    ab = connections(nodes[0], nodes[1])
    ba = connections(nodes[1], nodes[0])
    bc = connections(nodes[1], nodes[2])
    cb = connections(nodes[2], nodes[1])

    ac_bidir = drbdtest.Connections([ca, ac])
    ab_bidir = drbdtest.Connections([ab, ba])

    all_c = drbdtest.Connections([ca, ac, ab, ba, bc, cb])
    all_c.connect()
    all_c.event(r'connection .* connection:Connected')

    log('* Part III with nodes: %s %s %s ' % (a, b, c))
    a.run(['true', 'mark part III'])
    b.run(['true', 'mark part III'])
    c.run(['true', 'mark part III'])
    # test begins:
    ca.disconnect()
    a.primary()
    write_on_node(a)
    resource.forbidden_patterns.difference_update([
        r'connection:NetworkFailure',
        r'connection:BrokenPipe'
    ])
    ab.disconnect(force=True)
    ba.event(r'connection .* connection:Unconnected')
    resource.forbidden_patterns.update([
        r'connection:NetworkFailure',
        r'connection:BrokenPipe'
    ])
    a.secondary()
    assert_resync_dir(bc, cb, '')
    write_on_node(b)
    ab.connect()
    assert_resync_dir(ba, ab, '')
    resource.forbidden_patterns.update([r'replication:SyncSource', r'replication:SyncTarget'])
    ca.connect()
    ac_bidir.event(r'connection .* connection:Connected')
    # TODO move the event to peer_device level!
    resource.forbidden_patterns.difference_update([r'replication:SyncSource', r'replication:SyncTarget'])

# main
write_offset = 0

resource = drbdtest.setup(min_nodes=3, max_nodes=5)
writing_n = resource.nodes[0]
other_nodes = resource.nodes.difference([writing_n])

resource.add_disk('10M')
resource.up_wait()

log('* Make up-to-date data available.')
resource.skip_initial_sync()

# Part I tests the detect_copy_ops_on_peer() function
disconnect_reverse(writing_n, other_nodes)
write_on_node(writing_n)
connect_them_oldest_first(other_nodes)
connect_oldest_to_newest(writing_n, other_nodes)
form_a_ring(writing_n, other_nodes)

# Part II, verify that resynch propagation through a chain of nodes
# works repeatedly (that used to be the resync-never-connected test)
# That checks if clearing the bitmap base at the head node works
form_a_chain(resource.nodes)
write_on_head(resource.nodes)

# Part III
disconnect_chain(resource.nodes)
part_iii(resource.nodes[0:3])

log('* Shut down and clean up.')
resource.down()
resource.teardown()
