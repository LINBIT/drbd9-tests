#! /usr/bin/env python3
### vmshed: { "vms_all": [3], "vms_ci": null, "drbd_version_min": "9.0" }

from python import drbdtest
from python.drbdtest import connections, log, peer_devices


resource = drbdtest.setup_resource(nodes=3)
diskless_n, source_n, target_n = resource.nodes

resource.disk_options = 'c-max-rate 20M;'
resource.add_disk('100M', diskful_nodes=[source_n, target_n])
resource.up_wait()

source_target_c = connections(source_n, target_n)
source_target_pd = peer_devices(source_n, target_n)
target_source_c = connections(target_n, source_n)
target_source_pd = peer_devices(target_n, source_n)

log('* Make up-to-date data available.')
resource.skip_initial_sync()

log('* Write data without target node')
target_source_c.disconnect()
source_n.write(size='96M', bs='1M', direct=1)

log('* Let sync start')
target_source_c.connect()
source_target_pd.event(r'peer-device .* replication:SyncSource')
target_source_pd.event(r'peer-device .* replication:SyncTarget')

target_n.primary()

# wait until events2 reports >= 20 % done
target_source_pd.event(r'peer-device .* done:([2-9][0-9][0-9.]+)')

log('* Break connection')
resource.forbidden_patterns.remove(r'connection:BrokenPipe')
resource.forbidden_patterns.remove(r'connection:NetworkFailure')
target_source_c.disconnect(force=True)
source_target_c.event(r'connection .* connection:Connecting')
resource.forbidden_patterns.add(r'connection:NetworkFailure')
resource.forbidden_patterns.add(r'connection:BrokenPipe')

target_n.secondary()

log('* Restore connection')
target_source_c.connect()

log('* Let sync finish')
source_target_pd.event(r'peer-device .* replication:SyncSource')
target_source_pd.event(r'peer-device .* replication:SyncTarget')
source_target_pd.event(r'peer-device .* replication:Established')
target_n.volumes[0].event(r'disk:UpToDate')

log('* Shut down and clean up.')
resource.down()
resource.cluster.teardown()
