#! /usr/bin/env python

# For your convenience, fence handler exit code map:
# 3  Peer's disk state was already Inconsistent.
# 4  Peer's disk state was successfully set to Outdated
#    (or was Outdated tobegin with).
# 5  Connection to the peer node failed, peer could not be reached.
# 6  Peer refused to be outdated because the affected resource was in the
#    primary role.
# 7  Peer node was successfully fenced off the cluster.
#    This should never occur unless fencing is set to resource-and-stonith for
#    the affected resource.

import time
import random
from python import drbdtest
from python.drbdtest import verbose
from subprocess import CalledProcessError

random.seed()
resource = drbdtest.setup(min_nodes=2, max_nodes=5)

resource.add_disk('10M')
resource.up_wait()

verbose('* Make up-to-date data available.')
resource.skip_initial_sync();

#
# Ideally NetworkFailure and Broken pipe are only allowed while
# Breaking the connection. But when I re-enable it the next event
# finds the previous BrokenPipe.. No idea how to call the
# sync_events method...
#
resource.forbidden_patterns.difference_update([
    r'connection:NetworkFailure',
    r'connection:BrokenPipe'
])

test_run = 0
peer_self_outdated = 0
peer_fenced = 0

def prepare(description, fencing_mode, handler_exit, test_mode, nodes):
    global test_run

    test_run += 1
    verbose('* %s; fencing = %s; handler_exit = %d; test = %s; case_nr = %d'
            % (description, fencing_mode, handler_exit, test_mode, test_run))

    resource.net_options = 'fencing %s;' % (fencing_mode)
    if test_mode == "RECONNECT":
        resource.handlers = 'fence-peer "sleep 10; exit %d";' % (handler_exit)
    else:
        resource.handlers = 'fence-peer "exit %d";' % (handler_exit)

    for n in nodes:
        n.config_changed = True

    drbdtest.Nodes(nodes).update_config()
    drbdtest.Nodes(nodes).run(['drbdadm', 'adjust', '-v', resource.name])

def fencing_disconnect(n1, n2, test_mode):
    n1_to_n2 = drbdtest.Connections()
    n1_to_n2.add(drbdtest.Connection(n1, n2))

    if test_mode == "DOWN":
        n1_to_n2.disconnect()
    else: # FORCE and RECONNECT cases
        #resource.forbidden_patterns.difference_update([
        #    r'connection:NetworkFailure',
        #    r'connection:BrokenPipe'
        #])
        n1_to_n2 = drbdtest.Connections()
        n1_to_n2.add(drbdtest.Connection(n1, n2))
        n1_to_n2.disconnect(force = True)

        #resource.sync_events(resource)
        #resource.forbidden_patterns.update([
        #    r'connection:NetworkFailure',
        #    r'connection:BrokenPipe'
        #])

def fencing_test1(fencing_mode, handler_exit, test_mode):
    global peer_self_outdated
    global peer_fenced

    [n1, n2] = random.sample(resource.nodes, 2)
    prepare("Promote before disconnect", fencing_mode, handler_exit, test_mode, [n1, n2])

    n1_to_n2 = drbdtest.Connections()
    n1_to_n2.add(drbdtest.Connection(n1, n2))
    pds = drbdtest.PeerDevices()
    pds.add(drbdtest.PeerDevice(drbdtest.Connection(n2, n1), n2.volumes[0]))

    n2.primary()

    fencing_disconnect(n1, n2, test_mode)

    if fencing_mode == "dont-care":
        pds.event(r'peer-device .* peer-disk:DUnknown')
    else:
        if test_mode == "DOWN":
            pds.event(r'peer-device .* peer-disk:Outdated')
        else: # test_mode == "FORCE"
            if fencing_mode == "resource-only" or fencing_mode == "resource-and-stonith":
                # When there are more nodes, either the handler triggers or the disconnected node realized
                # by itself that is needs to be outdated. When the primary and the disconnected are
                # indirectly connected by a third node, the news about being outdated might be
                # relayed through that third node.
                ev=[['']]
                if fencing_mode == "resource-and-stonith":
                    ev = n2.event(r'(?:resource .*|change peer-device .* peer-node-id:%d .*) (suspended:fencing|peer-disk:Outdated)' % n1.id)

                if ev[0][0] != 'peer-disk:Outdated':
                    ev = n2.event(r'(?:call helper .*|change peer-device .* peer-node-id:%d .*) (helper:fence-peer|peer-disk:Outdated)' % n1.id)

                if test_mode == "RECONNECT":
                    n1_to_n2.connect()
                    if fencing_mode == "resource-and-stonith":
                        n2.event(r'resource .* suspended:no')
                    pds.event(r'peer-device .* peer-disk:UpToDate')
                else:
                    if ev[0][0] == 'helper:fence-peer':
                        peer_fenced += 1
                        if handler_exit in [3, 4, 5, 7]:
                            if handler_exit == 3:
                                pds.event(r'peer-device .* peer-disk:Inconsistent')
                            else:
                                pds.event(r'peer-device .* peer-disk:Outdated')

                        else: # handler exit 6 case
                            n2.run(["drbdadm", "resume-io", "%s" % (resource.name)])
                    elif ev[0][0] == 'peer-disk:Outdated':
                        peer_self_outdated += 1
                    else:
                        raise RuntimeError("Regex returned not expected match")

                    if fencing_mode == "resource-and-stonith":
                        n2.event(r'resource .* suspended:no')

    n2.secondary()

    if test_mode == "DOWN" or test_mode == "FORCE":
        n1_to_n2.connect()
        pds.event(r'peer-device .* peer-disk:UpToDate')

    if test_mode != "RECONNECT":
        n1_to_n2.event(r'connection .* connection:Connected')

def fencing_test2(fencing_mode, handler_exit, test_mode):
    [n1, n2] = random.sample(resource.nodes, 2)
    prepare("Disconnect before promote", fencing_mode, handler_exit, test_mode, [n1, n2])

    n1_to_n2 = drbdtest.Connections()
    n1_to_n2.add(drbdtest.Connection(n1, n2))

    fencing_disconnect(n1, n2, test_mode)
    n2_to_n1 = drbdtest.Connections()
    n2_to_n1.add(drbdtest.Connection(n2, n1))
    n2_to_n1.event(r'connection .* connection:Connecting')
    time.sleep(0.1) # to prevent concurrent state change....

    if fencing_mode == "dont-care":
        n2.primary()
        n2.secondary()
    else:
        if test_mode == "RECONNECT":
            # I would realy like to make n2 primary first, and call connect
            # afterwards. But I do not know how; I would need the ability to
            # background the "drbdadm primary" command.
            n1_to_n2.connect(wait=False)
            n2.run(['/bin/bash', '-c', 'drbdadm primary %s' % (resource.name)])
            n2.event(r'call helper .* helper:fence-peer')
            n1.event(r'connection .* connection:Connecting')
            n2.event(r'resource .* role:Primary')
            n2.secondary()
        else:  # DOWN and FORCE cases
            if handler_exit in [3, 4, 5, 7]:
                n2.primary(res = resource, wait = False)
                n2.event(r'call helper .* helper:fence-peer')
                pds = drbdtest.PeerDevices()
                pds.add(drbdtest.PeerDevice(drbdtest.Connection(n2, n1), n2.volumes[0]))
                if handler_exit == 3:
                    pds.event(r'peer-device .* peer-disk:Inconsistent')
                else:
                    pds.event(r'peer-device .* peer-disk:Outdated')
                n2.event(r'resource .* role:Primary')
                n2.secondary()
            else:
                try:
                    n2.primary()
                except CalledProcessError:
                    pass
                else:
                    raise RuntimeError("Becoming primary unexpecteldy succeeded")

                # One would be tempted to expect a
                # n2.event(r'resource .* suspended:fencing')
                # here, but that is wrong. Since it is not primary yet, no need to
                # suspend IO while the handler runs.

                n2.event(r'call helper .* helper:fence-peer')

    if test_mode == "DOWN" or test_mode == "FORCE":
        n1_to_n2.connect()

    if test_mode != "RECONNECT":
        n1_to_n2 = drbdtest.Connections()
        n1_to_n2.bidir_add(n1, n2)
        n1_to_n2.event(r'connection .* connection:Connected')

def execute_test_cases(test_func):
    for test_mode in ["DOWN", "FORCE"]:
        test_func("dont-care", 0, test_mode)

    for test_mode in ["DOWN", "FORCE"]:
        for fencing_mode in ["resource-only", "resource-and-stonith"]:
            for exit_code in range(3, 8):
                test_func(fencing_mode, exit_code, test_mode)

    for fencing_mode in ["resource-only", "resource-and-stonith"]:
        test_func(fencing_mode, 0, "RECONNECT")

# main

#If you want to call a specific test firs/only:
#fencing_test2("resource-only", 0, "RECONNECT")
#verbose('* Shut down and clean up.')
#time.sleep(0.1)
#resource.down()
#resource.rmmod()
#exit(0)

execute_test_cases(fencing_test1)
execute_test_cases(fencing_test2)

verbose('%d times the fence-peer handler was called' % peer_fenced)
verbose('%d times the self-outdate of the disconnected node was quicker' % peer_self_outdated)
verbose('* Shut down and clean up.')
time.sleep(0.1)
resource.down()
resource.rmmod()
