#! /bin/sh

m4_define() {
    local name array key
    for name in "$@"; do
	set -- $(declare -p "$name" 2> /dev/null)
	case "$2" in
	-A)
	    # Asociative array
	    echo "m4_define_array(\`$name')"
	    eval "
		for key in \"\${!$name[@]}\"; do
		    echo \"$name(\\\`\$key', \\\`\${$name[\$key]}')\"
		done
	    "
	    ;;
	-a)
	    # Array
	    set -- "$(printf "\`%s', " "${NODES[@]}")"
	    set -- "$(eval "printf \"\\\`%s', \" \"\${$name[@]}\"")"
	    echo "m4_define(\`$name', \`${1%??}')"
	    ;;
	--)
	    # Normal variable
	    echo "m4_define(\`$name', \`${!name}')"
	    ;;
	esac
    done
}

debug() {
    if [ -n "$opt_debug" ]; then
	printf "%q " "$@"
	echo
     fi >&2
    "$@"
}

instantiate_template() {
    local TMPL=$1
    shift
    local TMPL_DEFS="$(m4_define "$@")"

    debug m4 -P -I ../m4 \
	-D TMPL_DEFS="$TMPL_DEFS" \
	-D TMPL="$TMPL" \
	main.m4
}

assign_global_values() {
    local node var expr

    for node in "${NODES[@]}"; do
	for var in "$@"; do
	    var=${var#GLOBAL_}
	    declare -g -A "$var"
	    expr="$var[\$node]"
	    [ -n "${!expr}" ] || eval "$expr=\"\$GLOBAL_$var\""
	done
    done
}

assign_addresses() {
    local node address

    for node in "${NODES[@]}"; do
	if [ -z "${ADDRESS[$node]}" ]; then
	    if address=$(gethostip -d "$node"); then
		ADDRESS[$node]="$address:$opt_port"
	    else
		ADDRESS[$node]="$node:$opt_port"
		status=1
	    fi
	fi
    done
}

declare -a node_ids_used
assign_node_ids() {
    local node expr n

    for node in "${NODES[@]}"; do
	if [ -z "${NODE_ID[$node]}" ]; then
	    for ((n = 0; ; n++)); do
		if [ -z "${node_ids_used[$n]}" ]; then
		    node_ids_used[$n]=1
		    break
		fi
	    done
	    NODE_ID[$node]=$n
	fi
    done
}

declare -A max_minor
assign_devices() {
    local node disk minor device device_node

    for node in "${NODES[@]}"; do
	for disk in ${!DISK*}; do
	    device=${disk/#DISK/DEVICE}
	    device_node="$device[\$node]"
	    if ! defined "$device" || [ -z "${!device_node}" ]; then
		minor=$(( max_minor[$node]++ ))
		set_node_array "$device" "$node" "/dev/drbd$minor"
	    fi
	done
    done
}

declare -A global_count
add_global() {
    local name=GLOBAL_$1 value=$2
    local count=$((++global_count[$name]))

    eval "$name$count=\$value"
}

defined() {
    declare -p "$1" > /dev/null 2> /dev/null
}

set_node_array() {
    local name=$1 node=$2 value=$3

    declare -g -A "$name"
    eval "$name[\$node]=$value"
}

add_node_array() {
    local name=$1 node=$2 value=$3
    local count=$((++node_array_count[$name]))

    set_node_array "$name$count" "$node" "$value"
}

usage() {
    [ $1 -eq 0 ] || exec >&2
    cat <<EOF
USAGE: ${0##*/} [options] {template}

OPTIONS:
  --resource=name
    Resource name to fill in (e.g., drbd0).  Required.

  --node=hostname
    Host name of a test node according to \`hostname'.  This option
    can be used multiple times, and is requird at least once.

  --disk=device, --meta=device
    The lower-level device to use for data or metadata.  When
    no lower-level device is specified, the value /dev/scratch/\$resource
    is used.  When no metadata device is specified, internal metadata
    are assumed.  Both options can be used multiple times.  When used
    before --node, they define defaults which can be overridden for each
    host (after --node).

  --address=address
    The network address and port number of a node.  When
    omitted, the first network address of the host according
    to \`gethostip' is used.  Can only be used after --host.

  --node-id=number
    The node identifier of a node.  When omitted, node idenfiers
    are assigned automatically.  Can only be used after --host.

  --device=device
    The upper-level device to use (e.g., /dev/drbd0).  When omitted,
    /dev/drbd\$n devices are assigned automatically.

  --port=number
    The port number to use by default.
EOF
    exit $1
}

options=`getopt -o h --long resource:,node:,device:,disk:,meta:,node-id:,address:,debug,port:,help -- "$@"` || usage 1
eval set -- "$options"

opt_debug=
declare -- RESOURCE
declare -a NODES
declare -A NODE_ID ADDRESS
opt_port=7789

while :; do
    case "$1" in
    -h|--help)
	usage 0
	;;
    --debug)
	opt_debug=1
	;;
    --port)
	opt_port=$2
	shift
	;;
    --resource)
	RESOURCE=$2
	shift
	;;
    --node)
	node=$2
	NODES=("${NODES[@]}" $node)
	declare -A node_array_count=()
	shift
	;;
    --)
	shift
	break
	;;
    *)
	# Per-node parameters
	# Strip leading two dashes, replace dashes with underscores, and convert to uppercase
	name=${1#??}; name=${name//-/_}; name=${name^^}
	case "$1" in
	--device|--disk|--meta)
	    if [ -z "$node" ]; then
		add_global "$name" "$2"
	    else
		add_node_array "$name" "$node" "$2"
	    fi
	    ;;
	*)
	    if [ -z "$node" ]; then
		echo "Option $1 is not allowed before the first --node option" >&2
		usage 1
	    fi
	    eval "$expr[\$node]=\$2"
	    ;;
	esac
	shift
	;;
    esac
    shift
done

[ -n "$RESOURCE" -a ${#NODES[@]} -ge 1 -a $# -ge 1 ] || usage 1

[ -n "$GLOBAL_DISK1" ] || GLOBAL_DISK1="/dev/scratch/$RESOURCE"
assign_global_values ${!GLOBAL_DEVICE*} ${!GLOBAL_DISK*} ${!GLOBAL_META*}
assign_addresses
assign_node_ids
assign_devices

VOLUMES=(${!DISK*})
VOLUMES=("${VOLUMES[@]/#DISK}")
for template in "$@"; do
    instantiate_template "$template" RESOURCE NODES VOLUMES NODE_ID ADDRESS ${!DEVICE*} ${!DISK*} ${!META*}
done

exit $status
