#! /usr/bin/env python3
### vmshed: { "vms_all": [3], "vms_ci": null, "drbd_version_min": "9.0" }
#
# This test is similar to the resync-source-becomes-target test. It
# unveiled two bugs in DRBD (up to 9.0.24) which were not uncovered by
# resync-source-becomes-target.
#
# The main differences are that it resyncs a few hundred MBs and it sets
# up DRBD's data structures so that select_best_resync_source() finds
# the candidate before finding the other peer_device

import time
from python import drbdtest
from python.drbdtest import connections, log, peer_devices

def set_gi(n, peer, uuids):
    uuid_str = ''
    index = 0
    for uuid in uuids:
        uuid_str += '%016X:' % (uuid)
        index += 1
    for i in range(index,4):
        uuid_str += ':'
    uuid_str += '1:1'
    log(uuid_str)
    n.run(["drbdmeta", str(n.disks[0].minor), "v09", n.disks[0].disk, "internal",
           "--node-id=%d" % (peer.id), "set-gi", uuid_str, "--force"]);


resource = drbdtest.setup(nodes=3)
resource.add_disk('600M')

[node_a, node_b, node_c] = list(resource.nodes)

log('* Preparing')
set_gi(node_a, node_b, [0xAAA, 0xBBB, 0xCCC])
set_gi(node_a, node_c, [0xAAA, 0xBBB, 0xCCC])
set_gi(node_b, node_c, [0xBBB, 0xCCC])
set_gi(node_b, node_a, [0xBBB, 0xCCC])
set_gi(node_c, node_a, [0xCCC])

node_a.up()
node_a.volumes[0].write(size='400M', bs='1M', direct=1)
node_b.new_resource()
node_b.new_minor()
node_b.new_peer()
node_b.peer_device_options()
node_b.new_path()
node_b.attach()
node_b.volumes[0].write(size='300M', bs='1M', direct=1)

log('* Testing')
node_c.up()
conn_c_a = connections(node_c, node_a)[0]
pd_c_a = drbdtest.PeerDevice(conn_c_a, resource.volumes[0])

node_b.connect(node_c)
conn_c_b = connections(node_c, node_b)[0]
pd_c_b = drbdtest.PeerDevice(conn_c_b, resource.volumes[0])

pd_c_b.event(r'peer-device .* replication:SyncTarget')

node_b.connect(node_a)
conn_b_a = connections(node_b, node_a)[0]
pd_b_a = drbdtest.PeerDevice(conn_b_a, resource.volumes[0])

pd_b_a.event(r'peer-device .* replication:SyncTarget')
pd_c_a.event(r'peer-device .* replication:PausedSyncT')
pd_b_a.event(r'peer-device .* replication:Established')
pd_c_b.event(r'peer-device .* replication:Established')
pd_c_a.event(r'peer-device .* replication:SyncTarget')
pd_c_a.event(r'peer-device .* replication:Established')

resource.down()
resource.teardown()
