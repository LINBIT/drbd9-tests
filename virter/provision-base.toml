[values]
# KernelPackage is a path to a kernel package file to be installed
KernelPackage = ""
# KernelRelease is the version of the kernel to install from the repositories.
# When neither KernelPackage nor KernelRelease is set, the kernel will not be replaced.
KernelRelease = ""
# KernelRepositoryURL is the URL for the repository containing the kernel package.
# Only supported on rpm based distributions.
KernelRepositoryURL = ""

# Disable SELinux
[[steps]]
[steps.shell]
script = """
if command -v setenforce > /dev/null; then
	echo "Disabling SELinux"
	setenforce 0
	sed -i 's/^SELINUX=.*/SELINUX=disabled/' /etc/selinux/config
fi
"""

# Configure kernel parameters
[[steps]]
[steps.shell]
script = """
# linbit network routes IPv6 traffic over a slow link, so disable it
echo net.ipv6.conf.all.disable_ipv6=1 >> /etc/sysctl.conf
echo net.ipv6.conf.default.disable_ipv6=1 >> /etc/sysctl.conf

# log everything to the console
echo 'kernel.printk = 8 8 8 8' >> /etc/sysctl.conf

sysctl -p
"""

# Disable unwanted services
[[steps]]
[steps.shell]
script = """
# Disable unnecessary updates
units="unattended-upgrades.service apt-daily.timer apt-daily-upgrade.timer"

# Disable services which fail anyway
units="$units kdump.service postfix.service"

for u in $units; do
	if systemctl list-unit-files | grep -Fq $u; then
		systemctl disable --now $u
	fi
done
"""

# Uninstall snapd
[[steps]]
[steps.shell]
script = """
if command -v snap > /dev/null; then
	apt-get purge snapd
fi
"""

[[steps]]
[steps.rsync]
source = "{{ .KernelPackage }}"
dest = "/opt/packages-kernel/"

# Install kernel
[[steps]]
[steps.shell]
script = '''
set -e

mkdir -p /opt/packages-kernel
install_package=$(find /opt/packages-kernel -type f)

[ -z "$KERNEL_RELEASE" -a -z "$install_package" ] && exit 0

kernel::rpm() {
	if yum list kernel-core >/dev/null 2>/dev/null; then
		kernel_prefix=kernel-core
	else
		kernel_prefix=kernel
	fi
	[ -z "$install_package" ] && install_package="${kernel_prefix}-$KERNEL_RELEASE.$(uname -m)"

	if [ -n "$KERNEL_REPOSITORY_URL" ]; then
		cat <<- EOF > /etc/yum.repos.d/kernel.repo
		[drbd-kernel]
		name=Kernel for DRBD Tests
		baseurl=$KERNEL_REPOSITORY_URL
		gpgcheck=0
		enabled=1
		EOF
	fi

	rpm -qa | grep "^${kernel_prefix}-[0-9]\+" | sort > /tmp/had
	yum install -y "$install_package"
	rpm -qa | grep "^${kernel_prefix}-[0-9]\+" | sort > /tmp/have

	for k in $(comm -12 /tmp/had /tmp/have); do
		[ "$k" = "$install_package" ] && continue

		# on RHEL8 the kernel package is called kernel-core, but we
		# want to remove the kernel metapackage
		meta=$(printf %s $k | sed s/kernel-core/kernel/)

		to_remove=$k
		rpm -q $meta && to_remove=$meta

		printf "Removing '%s'\n" $to_remove
		# yum autoremove does not like to remove the running kernel
		rpm -e $to_remove
	done

	# also install kernel-modules-extra if available
	if yum list kernel-modules-extra-$KERNEL_RELEASE; then
		yum install -y "kernel-modules-extra-$KERNEL_RELEASE"
	fi
}

kernel::deb() {
	[ -z "$install_package" ] && install_package="linux-image-$KERNEL_RELEASE-generic"

	# Prevent the newest kernel from being installed automatically
	DEBIAN_FRONTEND=noninteractive apt-get autoremove -y linux-virtual linux-image-virtual

	dpkg-query -f '${Package}\n' -W "linux-image-*" | grep 'linux-image-[0-9]\+' | sort > /tmp/had
	apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y "$install_package"
	dpkg-query -f '${Package}\n' -W "linux-image-*" | grep 'linux-image-[0-9]\+' | sort > /tmp/have

	for k in $(comm -12 /tmp/had /tmp/have); do
		[ "$k" = "$install_package" ] && continue
		DEBIAN_FRONTEND=noninteractive apt-get autoremove -y $k
	done
}

# Set some kernel command line parameters for debugging convenience
sed -i '/GRUB_CMDLINE_LINUX=/s/"\(.*\)"/"\1 nokaslr page_poison=1"/' /etc/default/grub

if command -v yum > /dev/null; then
	kernel::rpm
elif command -v apt-get > /dev/null; then
	kernel::deb
else
	echo "Unknown package manager"
	exit 1
fi
rm -f /tmp/ha{d,ve}
'''

[steps.shell.env]
KERNEL_RELEASE = "{{.KernelRelease}}"
KERNEL_REPOSITORY_URL = "{{.KernelRepositoryURL}}"

# Install packages
[[steps]]
[steps.shell]
script = """
set -e
if command -v yum > /dev/null; then
	packages="iptables fio lvm2 make python3"
	if ! command -v tc > /dev/null; then
		packages="$packages iproute-tc"
	fi
	yum install -y $packages
elif command -v apt-get > /dev/null; then
	apt-get update
	apt-get -y install fio thin-provisioning-tools make
else
	echo "Unknown package manager"
	exit 1
fi
"""

# Install lbdisttool.py (only for yum)
[[steps]]
[steps.shell]
script = """
if command -v yum > /dev/null; then
	curl -sSLo python-lbdist.tar.gz https://github.com/LINBIT/python-lbdist/archive/master.tar.gz
	tar xvf python-lbdist.tar.gz
	cd python-lbdist-master
	mkdir -p /usr/local/lib/python3.6/site-packages/
	python3 setup.py install
fi
"""
